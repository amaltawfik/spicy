[{"path":"https://amaltawfik.github.io/spicy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 spicy authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://amaltawfik.github.io/spicy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Amal Tawfik. Author, maintainer, copyright holder.","code":""},{"path":"https://amaltawfik.github.io/spicy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tawfik (2025). spicy: Tools Data Management Variable Exploration. R package version 0.1.0. DOI: 10.5281/zenodo.15397865, https://github.com/amaltawfik/spicy.","code":"@Manual{,   title = {spicy: Tools for Data Management and Variable Exploration},   author = {Amal Tawfik},   year = {2025},   note = {R package version 0.1.0. DOI: 10.5281/zenodo.15397865},   url = {https://github.com/amaltawfik/spicy}, }"},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"spicy-","dir":"","previous_headings":"","what":"Descriptive Statistics and Data Management Tools","title":"Descriptive Statistics and Data Management Tools","text":"spicy designed make variable exploration, documentation, descriptive statistics fast, expressive, easy use.","code":""},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"what-is-spicy","dir":"","previous_headings":"","what":"What is spicy?","title":"Descriptive Statistics and Data Management Tools","text":"spicy R package quick, consistent, elegant exploration data frames. helps : Extract variable metadata display compact summaries dataset variables using varlist() (vl() convenient shortcut), including names, labels, values, classes, number distinct non-missing values, number valid observations, number missing observations. Similar “Variable View” SPSS “Variables Manager” Stata. Generate interactive codebook generator code_book() extends varlist() searchable summaries built-export options (Copy, CSV, Excel, PDF, Print) via DT::datatable. Ideal documenting variables present data frame. Compute frequency tables freq(), row-wise means mean_n(), row-wise sums sum_n(), counts specific values using count_n() — automatic handling missing data. Explore relationships categorical variables using cross_tab() contingency tables cramer_v() association strength. Copy data frames result tables directly clipboard using copy_clipboard() fast export spreadsheets text editors. Extract assign variable labels column headers label_from_names(), especially useful LimeSurvey CSV exports headers follow “name [separator] label” pattern — string can used separator (e.g., “.”, ” - “,”:“, etc.). Handle labelled, factor, Date, POSIXct, commonly used variable types. intuitive functions return clean, structured outputs.","code":""},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Descriptive Statistics and Data Management Tools","text":"stable version, install CRAN. can install development version spicy GitHub :","code":"install.packages(\"spicy\") # install.packages(\"pak\") pak::pak(\"amaltawfik/spicy\")"},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Descriptive Statistics and Data Management Tools","text":"quick examples using built-datasets:   functions can directly used pipelines.","code":"library(spicy) library(dplyr)  # Get a summary of all variables in the Viewer varlist(iris) # Get a summary of the variables that start with \"d\" in the Viewer # Asterisks (*) in the title indicate that the data frame has been subsetted vl(mtcars, starts_with(\"d\")) # Get a summary of all variables as a tibble varlist(iris, tbl = TRUE) #> # A tibble: 5 × 7 #>   Variable     Label Values                        Class Ndist_val N_valid   NAs #>   <chr>        <chr> <chr>                         <chr>     <int>   <int> <int> #> 1 Sepal.Length <NA>  4.3, 4.4, 4.5, ..., 7.9       nume…        35     150     0 #> 2 Sepal.Width  <NA>  2, 2.2, 2.3, ..., 4.4         nume…        23     150     0 #> 3 Petal.Length <NA>  1, 1.1, 1.2, ..., 6.9         nume…        43     150     0 #> 4 Petal.Width  <NA>  0.1, 0.2, 0.3, ..., 2.5       nume…        22     150     0 #> 5 Species      <NA>  setosa, versicolor, virginica fact…         3     150     0  # Tabulate frequencies with sort alphabetically (Z-A) freq(iris, Species, sort = \"name-\") #> Frequency table: Species #> ──────────────────────────── #>  Values       N     % Valid% #> ──────────────────────────── #>  virginica   50  33.3   33.3 #>  versicolor  50  33.3   33.3 #>  setosa      50  33.3   33.3 #>  Total      150 100.0  100.0 #> ──────────────────────────── #> Class: factor #> Data: iris  # Cross-tab with column percentages cross_tab(mtcars, cyl, gear) #> Crosstable: cyl x gear (%) #> ───────────────────────────────────────── #>  Values           3     4     5 Row_Total #> ───────────────────────────────────────── #>  4              6.7  66.7  40.0      34.4 #>  6             13.3  33.3  20.0      21.9 #>  8             80.0   0.0  40.0      43.8 #>  Column_Total 100.0 100.0 100.0     100.0 #>  N             15.0  12.0   5.0      32.0 #> ───────────────────────────────────────── #> Chi-2 = 18 (df = 4), p = 0.00121, Cramer's V = 0.53  # Cross-tab with row percentages cross_tab(mtcars, cyl, gear, rowprct = TRUE) #> Crosstable: cyl x gear (%) #> ───────────────────────────────────────── #>  Values          3    4    5 Row_Total  N #> ───────────────────────────────────────── #>  4             9.1 72.7 18.2     100.0 11 #>  6            28.6 57.1 14.3     100.0  7 #>  8            85.7  0.0 14.3     100.0 14 #>  Column_Total 46.9 37.5 15.6     100.0 32 #> ───────────────────────────────────────── #> Chi-2 = 18 (df = 4), p = 0.00121, Cramer's V = 0.53  # Cross-tab with column percentages grouped by a single variable cross_tab(mtcars, cyl, gear, by = am) #> $`0` #> Crosstable: cyl x gear | am = 0 (%) #> ─────────────────────────────────── #>  Values           3     4 Row_Total #> ─────────────────────────────────── #>  4              6.7  50.0      15.8 #>  6             13.3  50.0      21.1 #>  8             80.0   0.0      63.2 #>  Column_Total 100.0 100.0     100.0 #>  N             15.0   4.0      19.0 #> ─────────────────────────────────── #> Chi-2 = 9 (df = 2), p = 0.0113, Cramer's V = 0.69 #>  #> $`1` #> Crosstable: cyl x gear | am = 1 (%) #> ─────────────────────────────────── #>  Values           4     5 Row_Total #> ─────────────────────────────────── #>  4             75.0  40.0      61.5 #>  6             25.0  20.0      23.1 #>  8              0.0  40.0      15.4 #>  Column_Total 100.0 100.0     100.0 #>  N              8.0   5.0      13.0 #> ─────────────────────────────────── #> Chi-2 = 3.8 (df = 2), p = 0.146, Cramer's V = 0.54  # Compute row-wise mean/sum (all values must be valid by default) or specific value df <- data.frame(   var1 = c(10, NA, 30, 40, 50),   var2 = c(5, NA, 15, NA, 25),   var3 = c(NA, 30, 20, 50, 10) ) df #>   var1 var2 var3 #> 1   10    5   NA #> 2   NA   NA   30 #> 3   30   15   20 #> 4   40   NA   50 #> 5   50   25   10 mean_n(df) #> [1]       NA       NA 21.66667       NA 28.33333 sum_n(df) #> [1] NA NA 65 NA 85 count_n(df, count = 10) #> [1] 1 0 0 0 1 count_n(df, special = \"NA\") #> [1] 1 2 0 1 0 df |> mutate(count30 = count_n(count = 30)) #>   var1 var2 var3 count30 #> 1   10    5   NA       0 #> 2   NA   NA   30       1 #> 3   30   15   20       1 #> 4   40   NA   50       0 #> 5   50   25   10       0  # Extract labels from column names like \"varname. label\" # This format (\"name. label\") is the default in LimeSurvey CSV exports # when using: Export results → Export format: CSV → Headings: Question code & question text. # It uses \". \" (dot + space) as the default separator between the question code and question text. df <- tibble::tibble(   \"age. Age of respondent\" = c(25, 30),   \"score. Total score. Manually computed.\" = c(12, 14) )  out <- label_from_names(df)  # View assigned labels labelled::var_label(out) #> $age #> [1] \"Age of respondent\" #>  #> $score #> [1] \"Total score. Manually computed.\""},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"why-use-spicy","dir":"","previous_headings":"","what":"Why use spicy?","title":"Descriptive Statistics and Data Management Tools","text":"Clean, expressive output Works well labelled survey data Handles weights, percentages, NA counts Great exploring data variables, teaching, reporting","code":""},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Descriptive Statistics and Data Management Tools","text":"use spicy publication teaching material, please cite : Tawfik, . (2025). spicy: Tools Data Management Variable Exploration (Version 0.1.0) [R package]. https://doi.org/10.5281/zenodo.15397865 can also get citation R format typing: download BibTeX citation directly.","code":"citation(\"spicy\")"},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Descriptive Statistics and Data Management Tools","text":"package licensed MIT license. See LICENSE details.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/build_ascii_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a formatted ASCII table (internal spicy engine) — build_ascii_table","title":"Build a formatted ASCII table (internal spicy engine) — build_ascii_table","text":"Low-level internal function constructs visually aligned ASCII table data.frame. supports Unicode characters, ANSI colors, dynamic width adjustment, left/right alignment, spacing control. function primarily used internally higher-level wrappers spicy_print_table() print.spicy_freq_table().","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/build_ascii_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a formatted ASCII table (internal spicy engine) — build_ascii_table","text":"","code":"build_ascii_table(   x,   padding = c(\"compact\", \"normal\", \"wide\"),   first_column_line = TRUE,   row_total_line = TRUE,   column_total_line = TRUE,   bottom_line = TRUE,   lines_color = \"darkgrey\",   align_left_cols = c(1L, 2L),   ... )"},{"path":"https://amaltawfik.github.io/spicy/reference/build_ascii_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a formatted ASCII table (internal spicy engine) — build_ascii_table","text":"x data.frame spicy_table object containing table format. Typically, includes columns Category, Values, Freq., Percent, etc. padding Character string controlling horizontal spacing columns: \"compact\" — minimal spacing \"normal\" — moderate spacing (default) \"wide\" — extra spacing (large displays wide content) first_column_line Logical. TRUE (default), vertical separator drawn first column (useful separating categories data). row_total_line, column_total_line Logical. Control horizontal rules total rows columns (default: TRUE). bottom_line Logical. TRUE (default), draws closing line bottom table. lines_color Character. Color used table separators (default: \"darkgrey\"). color applied ANSI color support available (see crayon::has_color()). align_left_cols Integer vector column indices left-align. Defaults c(1, 2) frequency tables (Category + Values). ... Additional arguments (currently ignored).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/build_ascii_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a formatted ASCII table (internal spicy engine) — build_ascii_table","text":"single character string containing full ASCII-formatted table, suitable direct printing cat().","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/build_ascii_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a formatted ASCII table (internal spicy engine) — build_ascii_table","text":"build_ascii_table() rendering engine produces aligned text layout spicy-formatted tables. automatically detects cell widths (including colored text), inserts Unicode separators, applies padding different display modes (\"compact\", \"normal\", \"wide\"). users, function called directly. Instead, use spicy_print_table() adds headers, notes, alignment logic automatically.","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/build_ascii_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a formatted ASCII table (internal spicy engine) — build_ascii_table","text":"","code":"# Internal usage example (for developers) df <- data.frame(   Category = c(\"Valid\", \"\", \"Missing\", \"Total\"),   Values = c(\"Yes\", \"No\", \"NA\", \"\"),   Freq. = c(12, 8, 1, 21),   Percent = c(57.1, 38.1, 4.8, 100.0) )  cat(build_ascii_table(df, padding = \"compact\")) #>  Category │ Values  Freq.  Percent  #> ──────────┼──────────────────────── #>  Valid    │ Yes        12     57.1  #>           │ No          8     38.1  #>  Missing  │ NA          1      4.8  #> ──────────┼──────────────────────── #>  Total    │            21      100  #> ──────────┴────────────────────────"},{"path":"https://amaltawfik.github.io/spicy/reference/code_book.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an interactive variable codebook — code_book","title":"Generate an interactive variable codebook — code_book","text":"code_book() creates interactive exportable codebook summarizing variables data frame. builds upon varlist() provide overview variable names, labels, classes, representative values sortable, searchable table. output displayed interactive DT::datatable() Viewer pane, allowing filtering, column reordering, export (copy, print, CSV, Excel, PDF) directly.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/code_book.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an interactive variable codebook — code_book","text":"","code":"code_book(x, values = FALSE, include_na = FALSE, title = \"Codebook\", ...)"},{"path":"https://amaltawfik.github.io/spicy/reference/code_book.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an interactive variable codebook — code_book","text":"x data frame tibble. values Logical. FALSE (default), displays compact summary variable's values. numeric, character, date/time, labelled, factor variables, four unique non-missing values shown: first three values, followed ellipsis (...), last value. Values sorted appropriate (e.g., numeric, character, date) factors, levels used directly sorted. labelled variables, prefixed labels displayed via labelled::to_factor(levels = \"prefixed\"). TRUE, unique non-missing values displayed. include_na Logical. TRUE, unique missing values (NA, NaN) explicitly appended end Values summary present variable. applies variable types. FALSE (default), missing values omitted Values still counted NAs column. title Optional character string displayed table title Viewer. Defaults \"Codebook\". Set NULL remove title completely. ... Additional arguments (currently unused).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/code_book.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an interactive variable codebook — code_book","text":"DT::datatable object.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/code_book.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an interactive variable codebook — code_book","text":"interactive datatable supports column sorting, searching, client-side export various formats. exports occur client-side Viewer Tab.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/code_book.html","id":"dependencies","dir":"Reference","previous_headings":"","what":"Dependencies","title":"Generate an interactive variable codebook — code_book","text":"Requires following packages: DT cli tools","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/code_book.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an interactive variable codebook — code_book","text":"","code":"if (FALSE) { # \\dontrun{ # Example with a built-in dataset df <- head(mtcars)  # Launch the interactive codebook (opens in Viewer) code_book(df) } # }"},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy data to the clipboard — copy_clipboard","title":"Copy data to the clipboard — copy_clipboard","text":"copy_clipboard() copies data frame, matrix, array (2D higher), table vector clipboard. can paste result text editor (e.g. Notepad++, Sublime Text), spreadsheet (e.g. Excel, LibreOffice Calc), word processor (e.g. Word).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy data to the clipboard — copy_clipboard","text":"","code":"copy_clipboard(   x,   row.names.as.col = FALSE,   row.names = TRUE,   col.names = TRUE,   message = TRUE,   quiet = FALSE,   ... )"},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy data to the clipboard — copy_clipboard","text":"x data frame, matrix, 2D array, 3D array, table, atomic vector copied. row.names..col Logical character. FALSE (default), row names added column. TRUE, column named \"rownames\" prepended. character string supplied, used column name row names. row.names Logical. TRUE (default), includes row names clipboard output. FALSE, row names omitted. col.names Logical. TRUE (default), includes column names clipboard output. FALSE, column names omitted. message Logical. TRUE (default), displays success message copying. FALSE, success message printed. quiet Logical. TRUE, suppresses messages, including success, coercion notices, warnings. FALSE (default), messages shown. ... Additional arguments passed clipr::write_clip().","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy data to the clipboard — copy_clipboard","text":"Invisibly returns object x. main purpose side effect copying data clipboard.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy data to the clipboard — copy_clipboard","text":"Note: Objects data frames 2D matrices (e.g. atomic vectors, arrays, tables) automatically converted character copied clipboard, required clipr::write_clip(). original object R remains unchanged. multidimensional arrays (e.g. 3D arrays), entire array flattened 1D character vector, element new line. preserve tabular structure, extract 2D slice copying. example: copy_clipboard(my_array[, , 1]).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy data to the clipboard — copy_clipboard","text":"","code":"# \\donttest{ if (clipr::clipr_available()) {   # Data frame   copy_clipboard(mtcars)    # Data frame with row names as column   copy_clipboard(mtcars, row.names.as.col = \"car\")    # Matrix   mat <- matrix(1:6, nrow = 2)   copy_clipboard(mat)    # Table   tbl <- table(iris$Species)   copy_clipboard(tbl)    # Array (3D) — flattened to character   arr <- array(1:8, dim = c(2, 2, 2))   copy_clipboard(arr)    # Recommended: copy 2D slice for tabular layout   copy_clipboard(arr[, , 1])    # Numeric vector   copy_clipboard(c(3.14, 2.71, 1.618))    # Character vector   copy_clipboard(c(\"apple\", \"banana\", \"cherry\"))    # Quiet mode (no messages shown)   copy_clipboard(mtcars, quiet = TRUE) } # }"},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-wise Count of Specific or Special Values — count_n","title":"Row-wise Count of Specific or Special Values — count_n","text":"count_n() counts, row data frame matrix, many times one values appear across selected columns. supports type-safe comparison, case-insensitive string matching, detection special values NA, NaN, Inf, -Inf.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-wise Count of Specific or Special Values — count_n","text":"","code":"count_n(   data = NULL,   select = tidyselect::everything(),   exclude = NULL,   count = NULL,   special = NULL,   allow_coercion = TRUE,   ignore_case = FALSE,   regex = FALSE,   verbose = FALSE )"},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-wise Count of Specific or Special Values — count_n","text":"data data frame matrix. Optional inside mutate(). select Columns include. Uses tidyselect helpers like tidyselect::everything(), tidyselect::starts_with(), etc. regex = TRUE, select treated regex string. exclude Character vector column names exclude selection. count Value(s) count. Ignored special used. Multiple values allowed (e.g., count = c(1, 2, 3) count = c(\"yes\", \"\")). R automatically coerces values count common type (e.g., c(2, \"2\") becomes c(\"2\", \"2\")), values expected final type. allow_coercion = FALSE, matching type-safe using identical(), type count must match values data. special Character vector special values count: \"NA\", \"NaN\", \"Inf\", \"-Inf\", \"\". \"NA\" uses .na(), therefore includes NA NaN values. \"NaN\" uses .nan() match actual NaN values. allow_coercion Logical (default TRUE). FALSE, uses strict matching via identical(). ignore_case Logical (default FALSE). TRUE, performs case-insensitive string comparisons. regex Logical (default FALSE). TRUE, interprets select regular expression pattern. verbose Logical (default FALSE). TRUE, prints processing messages.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-wise Count of Specific or Special Values — count_n","text":"numeric vector row-wise counts (unnamed).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Row-wise Count of Specific or Special Values — count_n","text":"function particularly useful summarizing data quality patterns row-wise structures, designed work fluently inside dplyr::mutate() pipelines. Internally, count_n() wraps stable dependency-free base function base_count_n(), allowing high flexibility testability.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Row-wise Count of Specific or Special Values — count_n","text":"function inspired datawizard::row_count(), provides additional flexibility: Element-wise type-safe matching using identical() allow_coercion = FALSE. ensures value type match exactly, enabling precise comparisons mixed-type columns. Support multiple values count, allowing queries like count = c(2, 3) count = c(\"yes\", \"\") count several values per row. Detection special values NA, NaN, Inf, -Inf special argument — feature available row_count(). Tidyverse-native behavior: can used inside mutate() without explicitly passing data argument.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"value-coercion-behavior","dir":"Reference","previous_headings":"","what":"Value coercion behavior","title":"Row-wise Count of Specific or Special Values — count_n","text":"R automatically coerces mixed-type vectors passed count common type. example, count = c(2, \"2\") becomes c(\"2\", \"2\"), R converts numeric character values unified type. means mixed-type checks possible runtime count passed function. ensure accurate type-sensitive matching, users avoid mixing types count explicitly.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"strict-matching-mode-allow-coercion-false-","dir":"Reference","previous_headings":"","what":"Strict matching mode (allow_coercion = FALSE)","title":"Row-wise Count of Specific or Special Values — count_n","text":"strict matching enabled, value count must match type target column exactly. factor columns, means count must also factor. Supplying count = \"b\" (character string) match factor value, even label appears identical. common intuitive approach use count = factor(\"b\"), works many cases. However, identical() — used internally strict comparisons — also checks internal structure factor, including order content levels. result, comparisons may still fail levels differ, even label . ensure perfect match (label levels), can reuse value taken directly data (e.g., df$x[2]). guarantees class factor levels align. However, approach works reliably selected columns factor structure.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"case-insensitive-matching-ignore-case-true-","dir":"Reference","previous_headings":"","what":"Case-insensitive matching (ignore_case = TRUE)","title":"Row-wise Count of Specific or Special Values — count_n","text":"ignore_case = TRUE, values involved comparison converted lowercase using tolower() matching. behavior applies character factor columns. Factors first converted character internally. Importantly, case-insensitive mode takes precedence strict type comparison: values longer compared using identical(), rather using lowercase string equality. enables flexible matching — example, \"b\" \"B\" match even allow_coercion = FALSE.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"example-strict-vs-case-insensitive-matching-with-factors","dir":"Reference","previous_headings":"","what":"Example: strict vs. case-insensitive matching with factors","title":"Row-wise Count of Specific or Special Values — count_n","text":"Like datawizard::row_count(), function also supports regex-based column selection, case-insensitive string comparison, column exclusion.","code":"df <- tibble::tibble(   x = factor(c(\"a\", \"b\", \"c\")),   y = factor(c(\"b\", \"B\", \"a\")) )  # Strict match fails with character input count_n(df, count = \"b\", allow_coercion = FALSE) #> [1] 0 0 0  # Match works only where factor levels match exactly count_n(df, count = factor(\"b\", levels = levels(df$x)), allow_coercion = FALSE) #> [1] 0 1 0  # Case-insensitive match succeeds for both \"b\" and \"B\" count_n(df, count = \"b\", ignore_case = TRUE) #> [1] 1 2 0"},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row-wise Count of Specific or Special Values — count_n","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tibble) library(haven)  # Basic usage df <- tibble(   x = c(1, 2, 2, 3, NA),   y = c(2, 2, NA, 3, 2),   z = c(\"2\", \"2\", \"2\", \"3\", \"2\") ) df #> # A tibble: 5 × 3 #>       x     y z     #>   <dbl> <dbl> <chr> #> 1     1     2 2     #> 2     2     2 2     #> 3     2    NA 2     #> 4     3     3 3     #> 5    NA     2 2     count_n(df, count = 2) #> [1] 2 3 2 0 2 count_n(df, count = 2, allow_coercion = FALSE) #> [1] 1 2 1 0 1 count_n(df, count = \"2\", ignore_case = TRUE) #> [1] 2 3 2 0 2 df |> mutate(num_twos = count_n(count = 2)) #> # A tibble: 5 × 4 #>       x     y z     num_twos #>   <dbl> <dbl> <chr>    <dbl> #> 1     1     2 2            2 #> 2     2     2 2            3 #> 3     2    NA 2            2 #> 4     3     3 3            0 #> 5    NA     2 2            2  # Mixed types and special values df <- tibble(   num   = c(1, 2, NA, -Inf, NaN),   char  = c(\"a\", \"B\", \"b\", \"a\", NA),   fact  = factor(c(\"a\", \"b\", \"b\", \"a\", \"c\")),   date  = as.Date(c(\"2023-01-01\", \"2023-01-01\", NA, \"2023-01-02\", \"2023-01-01\")),   lab   = labelled(c(1, 2, 1, 2, NA), labels = c(No = 1, Yes = 2)),   logic = c(TRUE, FALSE, NA, TRUE, FALSE) ) df #> # A tibble: 5 × 6 #>     num char  fact  date       lab       logic #>   <dbl> <chr> <fct> <date>     <dbl+lbl> <lgl> #> 1     1 a     a     2023-01-01  1 [No]   TRUE  #> 2     2 B     b     2023-01-01  2 [Yes]  FALSE #> 3    NA b     b     NA          1 [No]   NA    #> 4  -Inf a     a     2023-01-02  2 [Yes]  TRUE  #> 5   NaN NA    c     2023-01-01 NA        FALSE count_n(df, count = 2) #> [1] 0 2 0 1 0 count_n(df, count = 2, allow_coercion = FALSE) #> [1] 0 1 0 0 0 count_n(df, count = \"b\", ignore_case = FALSE) #> [1] 0 1 2 0 0 count_n(df, count = \"b\", ignore_case = TRUE) #> [1] 0 2 2 0 0 count_n(df, count = \"a\", select = fact) #> [1] 1 0 0 1 0 count_n(df, count = as.Date(\"2023-01-01\"), select = date) #> [1] 1 1 0 0 1 count_n(df, count = TRUE, select = logic) #> [1] 1 0 0 1 0 count_n(df, count = 2, select = lab) #> [1] 0 1 0 1 0 df <- df |> mutate(lab_chr = as_factor(lab)) count_n(df, count = \"Yes\", select = lab_chr, allow_coercion = TRUE) #> [1] 0 1 0 1 0 count_n(df, count = \"Yes\", select = lab_chr, allow_coercion = FALSE) #> [1] 0 0 0 0 0  # Count special values count_n(df, special = \"NA\") #> [1] 0 0 3 0 4 count_n(df, special = \"NaN\") #> [1] 0 0 0 0 1 count_n(df, special = \"-Inf\") #> [1] 0 0 0 1 0 count_n(df, special = c(\"NA\", \"NaN\")) #> [1] 0 0 3 0 4 count_n(df, special = \"all\") #> [1] 0 0 3 1 4  # Column selection strategies df <- tibble(   score_math    = c(1, 2, 2, 3, NA),   score_science = c(2, 2, NA, 3, 2),   score_lang    = c(\"2\", \"2\", \"2\", \"3\", \"2\"),   name          = c(\"Jean\", \"Marie\", \"Ali\", \"Zoe\", \"Nina\") ) df #> # A tibble: 5 × 4 #>   score_math score_science score_lang name  #>        <dbl>         <dbl> <chr>      <chr> #> 1          1             2 2          Jean  #> 2          2             2 2          Marie #> 3          2            NA 2          Ali   #> 4          3             3 3          Zoe   #> 5         NA             2 2          Nina  count_n(df, select = c(score_math, score_science), count = 2) #> [1] 1 2 1 0 1 count_n(df, select = starts_with(\"score_\"), exclude = \"score_lang\", count = 2) #> [1] 1 2 1 0 1 count_n(df, select = everything(), exclude = \"name\", count = 2) #> [1] 2 3 2 0 2 count_n(df, select = \"^score_\", regex = TRUE, count = 2) #> [1] 2 3 2 0 2 count_n(df, select = \"lang\", regex = TRUE, count = \"2\") #> [1] 1 1 1 0 1 df |> mutate(nb_two = count_n(count = 2)) #> # A tibble: 5 × 5 #>   score_math score_science score_lang name  nb_two #>        <dbl>         <dbl> <chr>      <chr>  <dbl> #> 1          1             2 2          Jean       2 #> 2          2             2 2          Marie      3 #> 3          2            NA 2          Ali        2 #> 4          3             3 3          Zoe        0 #> 5         NA             2 2          Nina       2 df |>   select(score_math, score_science) |>   mutate(nb_two = count_n(count = 2)) #> # A tibble: 5 × 3 #>   score_math score_science nb_two #>        <dbl>         <dbl>  <dbl> #> 1          1             2      1 #> 2          2             2      2 #> 3          2            NA      1 #> 4          3             3      0 #> 5         NA             2      1 df$nb_two <- count_n(df, select = starts_with(\"score_\"), count = 2) df[1:3, ] |> count_n(select = starts_with(\"score_\"), count = 2) #> [1] 2 3 2  # Strict type-safe matching with factor columns df <- tibble(   x = factor(c(\"a\", \"b\", \"c\")),   y = factor(c(\"b\", \"B\", \"a\")) ) df #> # A tibble: 3 × 2 #>   x     y     #>   <fct> <fct> #> 1 a     b     #> 2 b     B     #> 3 c     a      # Coercion: character \"b\" matches both x and y count_n(df, count = \"b\") #> [1] 1 1 0  # Strict match: fails because \"b\" is character, not factor (returns only 0s) count_n(df, count = \"b\", allow_coercion = FALSE) #> [1] 0 0 0  # Strict match with factor value: works only where levels match count_n(df, count = factor(\"b\", levels = levels(df$x)), allow_coercion = FALSE) #> [1] 0 1 0  # Using a value from the data: guarantees type and levels match for column x count_n(df, count = df$x[2], allow_coercion = FALSE) #> [1] 0 1 0  # Case-insensitive match (factors are converted to character internally) count_n(df, count = \"b\", ignore_case = TRUE) #> [1] 1 2 0 count_n(df, count = \"B\", ignore_case = TRUE) #> [1] 1 2 0"},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cramer's V — cramer_v","title":"Compute Cramer's V — cramer_v","text":"cramer_v() computes Cramer's V two-way frequency table, measuring strength association two categorical variables.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cramer's V — cramer_v","text":"","code":"cramer_v(x)"},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cramer's V — cramer_v","text":"x contingency table (class table) compute statistic.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cramer's V — cramer_v","text":"numeric vector length 1, representing Cramer's V statistic.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cramer's V — cramer_v","text":"Cramer's V based chi-squared statistic adjusts size table. suitable nominal (unordered categorical) variables.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cramer's V — cramer_v","text":"","code":"# Example with mtcars dataset data(mtcars)  # Discretize continuous variables mtcars$gear <- as.factor(mtcars$gear) mtcars$cyl <- as.factor(mtcars$cyl)  # Create contingency table tab <- table(mtcars$gear, mtcars$cyl)  # Compute Cramer's V cramer_v(tab) #> Warning: Chi-squared approximation may be incorrect #> [1] 0.5308655"},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-tabulation (SPSS-like) — cross_tab","title":"Cross-tabulation (SPSS-like) — cross_tab","text":"Computes cross-tabulation optional weights, grouping, percentages. Produces SPSS-like table structure intelligent defaults, robust Chi² diagnostics, modern ASCII formatting.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-tabulation (SPSS-like) — cross_tab","text":"","code":"cross_tab(   data,   x,   y = NULL,   by = NULL,   weights = NULL,   rescale = FALSE,   percent = c(\"none\", \"column\", \"row\"),   show_missing = TRUE,   include_stats = TRUE,   simulate_p = FALSE,   simulate_B = 2000,   digits = NULL,   styled = TRUE,   show_n = TRUE )"},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-tabulation (SPSS-like) — cross_tab","text":"data data frame. x Row variable (unquoted). y Column variable (unquoted, optional). Optional grouping variable expression (e.g. interaction(vs, )). weights Optional numeric weights. rescale Logical. TRUE, rescales weights total weighted N matches raw N. Equivalent SPSS option “Rescale weights sample size”. percent One \"none\", \"row\", \"column\". show_missing Logical; include NA category (default TRUE). include_stats Logical; compute Chi² Cramer’s V (default TRUE). simulate_p Logical; use Monte Carlo p-value simulation (default FALSE). simulate_B Integer; number replicates Monte Carlo (default 2000). digits Number decimals (default 1 percentages, 0 counts). styled Logical; TRUE, returns \"spicy_cross_table\" object (printing). show_n Logical; TRUE, adds marginal N totals percent != \"none\".","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-tabulation (SPSS-like) — cross_tab","text":"data.frame, list data.frames, spicy_cross_table object. used, returns spicy_cross_table_list.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"global-options","dir":"Reference","previous_headings":"","what":"Global Options","title":"Cross-tabulation (SPSS-like) — cross_tab","text":"function recognizes following global options modify default behavior: options(spicy.simulate_p = TRUE) Enables Monte Carlo simulation Chi² tests default. Equivalent setting simulate_p = TRUE every call. options(spicy.rescale = TRUE) Automatically rescales weights total weighted N equals raw N, mimicking SPSS option “Rescale weights sample size”. Equivalent setting rescale = TRUE call. options convenient users wish enforce consistent behavior across multiple calls cross_tab() spicy table functions. can disabled setting NULL: options(spicy.simulate_p = NULL, spicy.rescale = NULL). Example:","code":"options(spicy.simulate_p = TRUE, spicy.rescale = TRUE) cross_tab(mtcars, cyl, gear, weights = mtcars$mpg)"},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-tabulation (SPSS-like) — cross_tab","text":"","code":"# Basic crosstab cross_tab(mtcars, cyl, gear) #> Crosstable: cyl × gear (N) #>  Values      │       3        4       5 │      Total  #> ─────────────┼──────────────────────────┼──────────── #>  4           │       1        8       2 │         11  #>  6           │       2        4       1 │          7  #>  8           │      12        0       2 │         14  #> ─────────────┼──────────────────────────┼──────────── #>  Total       │      15       12       5 │         32  #> ─────────────┴──────────────────────────┴──────────── #> Chi²: 18.0 (df = 4), p = 0.001 #> Cramer's V: 0.53 #> Warning: 6 expected cells < 5 (66.7%). Minimum expected = 1.09. Consider `simulate_p = TRUE` or set globally via `options(spicy.simulate_p = TRUE)`.  # Weighted (rescaled) cross_tab(mtcars, cyl, gear, weights = mtcars$mpg, rescale = TRUE) #> Crosstable: cyl × gear (N) #>  Values      │       3        4       5 │      Total  #> ─────────────┼──────────────────────────┼──────────── #>  4           │       1       11       3 │         15  #>  6           │       2        4       1 │          7  #>  8           │       9        0       2 │         11  #> ─────────────┼──────────────────────────┼──────────── #>  Total       │      12       15       6 │         32  #> ─────────────┴──────────────────────────┴──────────── #> Chi²: 17.7 (df = 4), p = 0.001 #> Cramer's V: 0.53 #> Warning: 7 expected cells < 5 (77.8%). Minimum expected = 1.14. Consider `simulate_p = TRUE` or set globally via `options(spicy.simulate_p = TRUE)`.  # Grouped cross_tab(mtcars, cyl, gear, by = am) #> Crosstable: cyl × gear (N) | am = 0 #>  Values      │       3       4       5 │      Total  #> ─────────────┼─────────────────────────┼──────────── #>  4           │       1       2       0 │          3  #>  6           │       2       2       0 │          4  #>  8           │      12       0       0 │         12  #> ─────────────┼─────────────────────────┼──────────── #>  Total       │      15       4       0 │         19  #> ─────────────┴─────────────────────────┴──────────── #> Chi²: NA (df = 4), p = NA #> Cramer's V: NA #> Warning: 8 expected cells < 5 (88.9%). 5 expected cells < 1. Minimum expected = 0. Consider `simulate_p = TRUE` or set globally via `options(spicy.simulate_p = TRUE)`. #>  #> Crosstable: cyl × gear (N) | am = 1 #>  Values      │      3       4       5 │      Total  #> ─────────────┼────────────────────────┼──────────── #>  4           │      0       6       2 │          8  #>  6           │      0       2       1 │          3  #>  8           │      0       0       2 │          2  #> ─────────────┼────────────────────────┼──────────── #>  Total       │      0       8       5 │         13  #> ─────────────┴────────────────────────┴──────────── #> Chi²: NA (df = 4), p = NA #> Cramer's V: NA #> Warning: 9 expected cells < 5 (100%). 4 expected cells < 1. Minimum expected = 0. Consider `simulate_p = TRUE` or set globally via `options(spicy.simulate_p = TRUE)`.  # Grouped by an interaction cross_tab(mtcars, cyl, gear, by = interaction(vs, am)) #> Crosstable: cyl × gear (N) | ~interaction(vs, am) = 0.0 #>  Values      │       3       4       5 │      Total  #> ─────────────┼─────────────────────────┼──────────── #>  4           │       0       0       0 │          0  #>  6           │       0       0       0 │          0  #>  8           │      12       0       0 │         12  #> ─────────────┼─────────────────────────┼──────────── #>  Total       │      12       0       0 │         12  #> ─────────────┴─────────────────────────┴──────────── #> Chi² and Cramer's V not computed: insufficient data (only one non-empty row/column). #>  #> Crosstable: cyl × gear (N) | ~interaction(vs, am) = 1.0 #>  Values      │      3       4       5 │      Total  #> ─────────────┼────────────────────────┼──────────── #>  4           │      1       2       0 │          3  #>  6           │      2       2       0 │          4  #>  8           │      0       0       0 │          0  #> ─────────────┼────────────────────────┼──────────── #>  Total       │      3       4       0 │          7  #> ─────────────┴────────────────────────┴──────────── #> Chi²: NA (df = 4), p = NA #> Cramer's V: NA #> Warning: 9 expected cells < 5 (100%). 5 expected cells < 1. Minimum expected = 0. Consider `simulate_p = TRUE` or set globally via `options(spicy.simulate_p = TRUE)`. #>  #> Crosstable: cyl × gear (N) | ~interaction(vs, am) = 0.1 #>  Values      │      3       4       5 │      Total  #> ─────────────┼────────────────────────┼──────────── #>  4           │      0       0       1 │          1  #>  6           │      0       2       1 │          3  #>  8           │      0       0       2 │          2  #> ─────────────┼────────────────────────┼──────────── #>  Total       │      0       2       4 │          6  #> ─────────────┴────────────────────────┴──────────── #> Chi²: NA (df = 4), p = NA #> Cramer's V: NA #> Warning: 9 expected cells < 5 (100%). 6 expected cells < 1. Minimum expected = 0. Consider `simulate_p = TRUE` or set globally via `options(spicy.simulate_p = TRUE)`. #>  #> Crosstable: cyl × gear (N) | ~interaction(vs, am) = 1.1 #>  Values      │      3       4       5 │      Total  #> ─────────────┼────────────────────────┼──────────── #>  4           │      0       6       1 │          7  #>  6           │      0       0       0 │          0  #>  8           │      0       0       0 │          0  #> ─────────────┼────────────────────────┼──────────── #>  Total       │      0       6       1 │          7  #> ─────────────┴────────────────────────┴──────────── #> Chi² and Cramer's V not computed: insufficient data (only one non-empty row/column)."},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency Table (spicy engine) — freq","title":"Frequency Table (spicy engine) — freq","text":"Creates frequency table vector variable data frame, options weighting, sorting, handling labelled data, defining custom missing values, displaying cumulative percentages. styled = TRUE, function prints spicy-formatted ASCII table using print.spicy_freq_table() spicy_print_table(); otherwise, returns data.frame containing frequencies proportions.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency Table (spicy engine) — freq","text":"","code":"freq(   data,   x = NULL,   weights = NULL,   digits = 1,   valid = TRUE,   cum = FALSE,   sort = \"\",   na_val = NULL,   labelled_levels = c(\"prefixed\", \"labels\", \"values\", \"p\", \"l\", \"v\"),   rescale = TRUE,   styled = TRUE,   ... )"},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency Table (spicy engine) — freq","text":"data data.frame, vector, factor. data frame provided, specify target variable x. x variable data (unquoted). weights Optional numeric vector weights (length x). variable may referenced bare name belongs data. digits Number decimal digits display percentages (default: 1). valid Logical. TRUE (default), display valid percentages (excluding missing values). cum Logical. TRUE, add cumulative percentages. sort Sorting method values: \"\" - sorting (default) \"+\" - increasing frequency \"-\" - decreasing frequency \"name+\" - alphabetical -Z \"name-\" - alphabetical Z-na_val Vector numeric character values treated missing (NA). labelled variables (haven labelled), argument must refer underlying coded values, visible labels. Example:   labelled_levels labelled variables, defines labels values displayed: \"prefixed\" \"p\" - show labels [value] label (default) \"labels\" \"l\" - show labels \"values\" \"v\" - show numeric codes rescale Logical. TRUE (default), rescale weights total equals unweighted sample size. styled Logical. TRUE (default), print formatted spicy table. FALSE, return plain data.frame frequency values. ... Additional arguments passed print.spicy_freq_table().","code":"x <- labelled(c(1, 2, 3, 1, 2, 3), c(\"Low\" = 1, \"Medium\" = 2, \"High\" = 3)) freq(x, na_val = 1) # Treat all \"Low\" as missing"},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency Table (spicy engine) — freq","text":"data.frame columns: value - unique values factor levels n - frequency count (weighted applicable) prop - proportion total valid_prop - proportion valid responses (valid = TRUE) cum_prop, cum_valid_prop - cumulative percentages (cum = TRUE) styled = TRUE, prints formatted table console returns invisibly.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Frequency Table (spicy engine) — freq","text":"function designed mimic common frequency procedures statistical software SPSS Stata, integrating flexibility R's data structures. automatically detects type input (vector, factor, labelled) applies appropriate transformations, including: Handling labelled variables via labelled haven Optional recoding specific values missing (na_val) Optional weighting rescaling mechanism Support cumulative percentages (cum = TRUE) Multiple display modes labels via labelled_levels weighting applied (weights), frequencies percentages computed proportionally weights. argument rescale = TRUE normalizes weights sum equals unweighted sample size.","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency Table (spicy engine) — freq","text":"","code":"library(labelled)  # Simple numeric vector x <- c(1, 2, 2, 3, 3, 3, NA) freq(x) #> Frequency table: x #>  Category │ Values  Freq.  Percent  Valid Percent  #> ──────────┼─────────────────────────────────────── #>  Valid    │ 1           1     14.3           16.7  #>           │ 2           2     28.6           33.3  #>           │ 3           3     42.9           50.0  #>  Missing  │ NA          1     14.3                 #> ──────────┼─────────────────────────────────────── #>  Total    │             7    100.0          100.0  #> ──────────┴─────────────────────────────────────── #> Class: numeric #> Data: x  # Labelled variable (haven-style) x_lbl <- labelled(   c(1, 2, 3, 1, 2, 3, 1, 2, NA),   labels = c(\"Low\" = 1, \"Medium\" = 2, \"High\" = 3) ) var_label(x_lbl) <- \"Satisfaction level\"  # Treat value 1 (\"Low\") as missing freq(x_lbl, na_val = 1) #> Frequency table: x_lbl #>  Category │ Values      Freq.  Percent  Valid Percent  #> ──────────┼─────────────────────────────────────────── #>  Valid    │ [2] Medium      3     33.3           60.0  #>           │ [3] High        2     22.2           40.0  #>  Missing  │ NA              4     44.4                 #> ──────────┼─────────────────────────────────────────── #>  Total    │                 9    100.0          100.0  #> ──────────┴─────────────────────────────────────────── #> Label: Satisfaction level #> Class: haven_labelled, vctrs_vctr, double #> Data: x_lbl  # Display only labels, add cumulative % freq(x_lbl, labelled_levels = \"labels\", cum = TRUE) #> Frequency table: x_lbl #>  Category │ Values  Freq.  Percent  Valid Percent  Cum. Percent  Cum. Valid Percent  #> ──────────┼───────────────────────────────────────────────────────────────────────── #>  Valid    │ Low         3     33.3           37.5          33.3                37.5  #>           │ Medium      3     33.3           37.5          66.7                75.0  #>           │ High        2     22.2           25.0          88.9               100.0  #>  Missing  │ NA          1     11.1                        100.0                      #> ──────────┼───────────────────────────────────────────────────────────────────────── #>  Total    │             9    100.0          100.0         100.0               100.0  #> ──────────┴───────────────────────────────────────────────────────────────────────── #> Label: Satisfaction level #> Class: haven_labelled, vctrs_vctr, double #> Data: x_lbl  # Display values only, sorted descending freq(x_lbl, labelled_levels = \"values\", sort = \"-\") #> Frequency table: x_lbl #>  Category │ Values  Freq.  Percent  Valid Percent  #> ──────────┼─────────────────────────────────────── #>  Valid    │ 1           3     33.3           37.5  #>           │ 2           3     33.3           37.5  #>           │ 3           2     22.2           25.0  #>  Missing  │ NA          1     11.1                 #> ──────────┼─────────────────────────────────────── #>  Total    │             9    100.0          100.0  #> ──────────┴─────────────────────────────────────── #> Label: Satisfaction level #> Class: haven_labelled, vctrs_vctr, double #> Data: x_lbl  # With weighting df <- data.frame(   sexe = factor(c(\"Male\", \"Female\", \"Female\", \"Male\", NA, \"Female\")),   poids = c(12, 8, 10, 15, 7, 9) )  # Weighted frequencies (normalized) freq(df, sexe, weights = poids, rescale = TRUE) #> Frequency table: sexe #>  Category │ Values  Freq.  Percent  Valid Percent  #> ──────────┼─────────────────────────────────────── #>  Valid    │ Female   2.66     44.3           50.0  #>           │ Male     2.66     44.3           50.0  #>  Missing  │ NA       0.69     11.5                 #> ──────────┼─────────────────────────────────────── #>  Total    │             6    100.0          100.0  #> ──────────┴─────────────────────────────────────── #> Class: factor #> Data: df #> Weight: poids (rescaled)  # Weighted frequencies (without rescaling) freq(df, sexe, weights = poids, rescale = FALSE) #> Frequency table: sexe #>  Category │ Values  Freq.  Percent  Valid Percent  #> ──────────┼─────────────────────────────────────── #>  Valid    │ Female     27     44.3           50.0  #>           │ Male       27     44.3           50.0  #>  Missing  │ NA          7     11.5                 #> ──────────┼─────────────────────────────────────── #>  Total    │            61    100.0          100.0  #> ──────────┴─────────────────────────────────────── #> Class: factor #> Data: df #> Weight: poids  # Base R style, with weights and cumulative percentages freq(df$sexe, weights = df$poids, cum = TRUE) #> Frequency table: sexe #>  Category │ Values  Freq.  Percent  Valid Percent  Cum. Percent  Cum. Valid Percent  #> ──────────┼───────────────────────────────────────────────────────────────────────── #>  Valid    │ Female   2.66     44.3           50.0          44.3                50.0  #>           │ Male     2.66     44.3           50.0          88.5               100.0  #>  Missing  │ NA       0.69     11.5                        100.0                      #> ──────────┼───────────────────────────────────────────────────────────────────────── #>  Total    │             6    100.0          100.0         100.0               100.0  #> ──────────┴───────────────────────────────────────────────────────────────────────── #> Class: factor #> Data: df #> Weight: poids (rescaled)  # Piped version (tidy syntax) and sort alphabetically descending (\"name-\") df |> freq(sexe, sort = \"name-\") #> Frequency table: sexe #>  Category │ Values  Freq.  Percent  Valid Percent  #> ──────────┼─────────────────────────────────────── #>  Valid    │ Male        2     33.3           40.0  #>           │ Female      3     50.0           60.0  #>  Missing  │ NA          1     16.7                 #> ──────────┼─────────────────────────────────────── #>  Total    │             6    100.0          100.0  #> ──────────┴─────────────────────────────────────── #> Class: factor #> Data: df  # Non-styled return (for programmatic use) f <- freq(df, sexe, styled = FALSE) head(f) #>    value n      prop valid_prop #> 1 Female 3 0.5000000        0.6 #> 2   Male 2 0.3333333        0.4 #> 3   <NA> 1 0.1666667         NA"},{"path":"https://amaltawfik.github.io/spicy/reference/label_from_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive variable labels from column names name<sep>label — label_from_names","title":"Derive variable labels from column names name<sep>label — label_from_names","text":"Splits column name first occurrence sep, renames column part sep (name), assigns part sep labelled::var_label(). works even label contains separator.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/label_from_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive variable labels from column names name<sep>label — label_from_names","text":"","code":"label_from_names(df, sep = \". \")"},{"path":"https://amaltawfik.github.io/spicy/reference/label_from_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive variable labels from column names name<sep>label — label_from_names","text":"df data.frame tibble column names form \"name<sep>label\" (e.g. \"name. label\"). (default LimeSurvey). sep Character string used separator name label. Default \". \" (LimeSurvey's default), literal string can used.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/label_from_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive variable labels from column names name<sep>label — label_from_names","text":"base tibble column names equal names (sep) var_label attributes equal labels (sep).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/label_from_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive variable labels from column names name<sep>label — label_from_names","text":"function especially useful LimeSurvey CSV exports using Export results → Export format: CSV → Headings: Question code & question text, column names look like \"code. question text\". case default separator \". \".","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/label_from_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive variable labels from column names name<sep>label — label_from_names","text":"","code":"# Example with LimeSurvey-style column names df <- data.frame(   \"age. Age of respondent\" = c(25, 30),   \"score. Total score. Manually computed.\" = c(12, 14),   check.names = FALSE )  # sep = \". \" by default (LimeSurvey) out <- label_from_names(df) labelled::var_label(out) #> $age #> [1] \"Age of respondent\" #>  #> $score #> [1] \"Total score. Manually computed.\" #>   # Example with a custom separator (\"|\") df2 <- data.frame(   \"id|Identifier\" = 1:3,   \"score|Total score\" = c(10, 20, 30),   check.names = FALSE ) out2 <- label_from_names(df2, sep = \"|\") labelled::var_label(out2) #> $id #> [1] \"Identifier\" #>  #> $score #> [1] \"Total score\" #>"},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Means with Optional Minimum Valid Values — mean_n","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"mean_n() computes row means data.frame matrix, handling missing values (NAs) automatically. Row-wise means calculated across selected numeric columns, optional condition minimum number (proportion) valid (non-missing) values required row included. Non-numeric columns excluded automatically reported.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"","code":"mean_n(   data = NULL,   select = dplyr::everything(),   exclude = NULL,   min_valid = NULL,   digits = NULL,   regex = FALSE,   verbose = FALSE )"},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"data data.frame matrix. select Columns include. regex = FALSE, use tidyselect syntax (default: dplyr::everything()). regex = TRUE, provide regular expression pattern (character string). exclude Columns exclude (default: NULL). min_valid Minimum number valid (non-NA) values required per row. proportion, applied number selected columns. digits Optional number decimal places round result. regex TRUE, select argument treated regular expression. FALSE, uses tidyselect helpers. verbose TRUE, prints message processing.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"numeric vector row-wise means.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"","code":"library(dplyr)  # Create a simple numeric data frame df <- tibble(   var1 = c(10, NA, 30, 40, 50),   var2 = c(5, NA, 15, NA, 25),   var3 = c(NA, 30, 20, 50, 10) )  # Compute row-wise mean (all values must be valid by default) mean_n(df) #> [1]       NA       NA 21.66667       NA 28.33333  # Require at least 2 valid (non-NA) values per row mean_n(df, min_valid = 2) #> [1]  7.50000       NA 21.66667 45.00000 28.33333  # Require at least 50% valid (non-NA) values per row mean_n(df, min_valid = 0.5) #> [1]  7.50000       NA 21.66667 45.00000 28.33333  # Round the result to 1 decimal mean_n(df, digits = 1) #> [1]   NA   NA 21.7   NA 28.3  # Select specific columns mean_n(df, select = c(var1, var2)) #> [1]  7.5   NA 22.5   NA 37.5  # Select specific columns using a pipe df |>   select(var1, var2) |>   mean_n() #> [1]  7.5   NA 22.5   NA 37.5  # Exclude a column mean_n(df, exclude = \"var3\") #> [1]  7.5   NA 22.5   NA 37.5  # Select columns ending with \"1\" mean_n(df, select = ends_with(\"1\")) #> [1] 10 NA 30 40 50  # Use with native pipe df |> mean_n(select = starts_with(\"var\")) #> [1]       NA       NA 21.66667       NA 28.33333  # Use inside dplyr::mutate() df |> mutate(mean_score = mean_n(min_valid = 2)) #> # A tibble: 5 × 4 #>    var1  var2  var3 mean_score #>   <dbl> <dbl> <dbl>      <dbl> #> 1    10     5    NA        7.5 #> 2    NA    NA    30       NA   #> 3    30    15    20       21.7 #> 4    40    NA    50       45   #> 5    50    25    10       28.3  # Select columns directly inside mutate() df |> mutate(mean_score = mean_n(select = c(var1, var2), min_valid = 1)) #> # A tibble: 5 × 4 #>    var1  var2  var3 mean_score #>   <dbl> <dbl> <dbl>      <dbl> #> 1    10     5    NA        7.5 #> 2    NA    NA    30       NA   #> 3    30    15    20       22.5 #> 4    40    NA    50       40   #> 5    50    25    10       37.5  # Select columns before mutate df |>   select(var1, var2) |>   mutate(mean_score = mean_n(min_valid = 1)) #> # A tibble: 5 × 3 #>    var1  var2 mean_score #>   <dbl> <dbl>      <dbl> #> 1    10     5        7.5 #> 2    NA    NA       NA   #> 3    30    15       22.5 #> 4    40    NA       40   #> 5    50    25       37.5  # Show verbose processing info df |> mutate(mean_score = mean_n(min_valid = 2, digits = 1, verbose = TRUE)) #> mean_n(): Row means computed with min_valid = 2, regex = FALSE #> # A tibble: 5 × 4 #>    var1  var2  var3 mean_score #>   <dbl> <dbl> <dbl>      <dbl> #> 1    10     5    NA        7.5 #> 2    NA    NA    30       NA   #> 3    30    15    20       21.7 #> 4    40    NA    50       45   #> 5    50    25    10       28.3  # Add character and grouping columns df_mixed <- mutate(df,   name = letters[1:5],   group = c(\"A\", \"A\", \"B\", \"B\", \"A\") ) df_mixed #> # A tibble: 5 × 5 #>    var1  var2  var3 name  group #>   <dbl> <dbl> <dbl> <chr> <chr> #> 1    10     5    NA a     A     #> 2    NA    NA    30 b     A     #> 3    30    15    20 c     B     #> 4    40    NA    50 d     B     #> 5    50    25    10 e     A      # Non-numeric columns are ignored mean_n(df_mixed) #> mean_n(): Ignored non-numeric columns: name, group #> [1]       NA       NA 21.66667       NA 28.33333  # Use within mutate() on mixed data df_mixed |> mutate(mean_score = mean_n(select = starts_with(\"var\"))) #> # A tibble: 5 × 6 #>    var1  var2  var3 name  group mean_score #>   <dbl> <dbl> <dbl> <chr> <chr>      <dbl> #> 1    10     5    NA a     A           NA   #> 2    NA    NA    30 b     A           NA   #> 3    30    15    20 c     B           21.7 #> 4    40    NA    50 d     B           NA   #> 5    50    25    10 e     A           28.3  # Use everything() but exclude non-numeric columns manually mean_n(df_mixed, select = everything(), exclude = \"group\") #> mean_n(): Ignored non-numeric columns: name #> [1]       NA       NA 21.66667       NA 28.33333  # Select columns using regex mean_n(df_mixed, select = \"^var\", regex = TRUE) #> [1]       NA       NA 21.66667       NA 28.33333 mean_n(df_mixed, select = \"ar\", regex = TRUE) #> [1]       NA       NA 21.66667       NA 28.33333  # Apply to a subset of rows (first 3) df_mixed[1:3, ] |> mean_n(select = starts_with(\"var\")) #> [1]       NA       NA 21.66667  # Store the result in a new column df_mixed$mean_score <- mean_n(df_mixed, select = starts_with(\"var\")) df_mixed #> # A tibble: 5 × 6 #>    var1  var2  var3 name  group mean_score #>   <dbl> <dbl> <dbl> <chr> <chr>      <dbl> #> 1    10     5    NA a     A           NA   #> 2    NA    NA    30 b     A           NA   #> 3    30    15    20 c     B           21.7 #> 4    40    NA    50 d     B           NA   #> 5    50    25    10 e     A           28.3  # With a numeric matrix mat <- matrix(c(1, 2, NA, 4, 5, NA, 7, 8, 9), nrow = 3, byrow = TRUE) mat #>      [,1] [,2] [,3] #> [1,]    1    2   NA #> [2,]    4    5   NA #> [3,]    7    8    9 mat |> mean_n(min_valid = 2) #> [1] 1.5 4.5 8.0"},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_cross_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for spicy_cross_table — print.spicy_cross_table","title":"Print method for spicy_cross_table — print.spicy_cross_table","text":"Print method spicy_cross_table","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_cross_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for spicy_cross_table — print.spicy_cross_table","text":"","code":"# S3 method for class 'spicy_cross_table' print(x, digits = NULL, ...)"},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_freq_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Styled print method for freq() tables (spicy engine) — print.spicy_freq_table","title":"Styled print method for freq() tables (spicy engine) — print.spicy_freq_table","text":"Internal print method used freq() display styled, spicy-formatted frequency table console. formats valid, missing, total rows; handles cumulative valid percentages; appends labeled footer including metadata variable label, class, dataset name, weighting information.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_freq_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Styled print method for freq() tables (spicy engine) — print.spicy_freq_table","text":"","code":"# S3 method for class 'spicy_freq_table' print(x, ...)"},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_freq_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Styled print method for freq() tables (spicy engine) — print.spicy_freq_table","text":"x data.frame returned freq() attached attributes: \"digits\": number decimal digits display \"data_name\": name source dataset \"var_name\": name variable \"var_label\": variable label, defined \"class_name\": original class variable \"weighted\", \"rescaled\", \"weight_var\": weighting metadata ... Additional arguments (ignored, required S3 method compatibility)","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_freq_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Styled print method for freq() tables (spicy engine) — print.spicy_freq_table","text":"Invisibly returns x printing formatted table.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_freq_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Styled print method for freq() tables (spicy engine) — print.spicy_freq_table","text":"function part spicy table rendering engine. automatically called printing result freq() styled = TRUE. output uses spicy_print_table() internally render colorized ASCII table consistent alignment separators. printed table includes: Valid missing value sections (applicable) Optional cumulative valid percentages final 'Total' row shown Category column footer summarizing metadata (variable label, data source, weights)","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_freq_table.html","id":"output-structure","dir":"Reference","previous_headings":"","what":"Output structure","title":"Styled print method for freq() tables (spicy engine) — print.spicy_freq_table","text":"printed table includes following columns: Category: Sections \"Valid\", \"Missing\", \"Total\" Values: Observed categories levels Freq.: Frequency count (weighted applicable) Percent: Percentage total Valid Percent: Percentage among valid values (optional) Cum. Percent: Cumulative percentage (optional) Cum. Valid Percent: Cumulative valid percentage (optional)","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy_freq_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Styled print method for freq() tables (spicy engine) — print.spicy_freq_table","text":"","code":"# Example using labelled data library(labelled) x <- labelled(   c(1, 2, 3, 1, 2, 3, 1, 2, NA),   labels = c(\"Low\" = 1, \"Medium\" = 2, \"High\" = 3) ) var_label(x) <- \"Satisfaction level\" # Internal use (normally called automatically by freq()) df <- spicy::freq(x, styled = FALSE) print(df) #>        value n      prop valid_prop #> 1    [1] Low 3 0.3333333      0.375 #> 2 [2] Medium 3 0.3333333      0.375 #> 3   [3] High 2 0.2222222      0.250 #> 4       <NA> 1 0.1111111         NA"},{"path":"https://amaltawfik.github.io/spicy/reference/spicy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"spicy: Descriptive Statistics and Data Management Tools — spicy-package","title":"spicy: Descriptive Statistics and Data Management Tools — spicy-package","text":"Extracts summarizes metadata data frames, including variable names, labels, types, missing values. Computes compact descriptive statistics, frequency tables, cross-tabulations assist efficient data exploration. Includes interactive exportable codebook generator documenting variable metadata. Facilitates identification missing data patterns structural issues datasets. Designed streamline initial data management exploratory analysis workflows within 'R'.","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/spicy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"spicy: Descriptive Statistics and Data Management Tools — spicy-package","text":"Maintainer: Amal Tawfik amal.tawfik@hesav.ch (ORCID) (ROR) [copyright holder]","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_print_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a spicy-formatted ASCII table — spicy_print_table","title":"Print a spicy-formatted ASCII table — spicy_print_table","text":"User-facing helper prints visually aligned, spicy-styled ASCII table created functions freq() cross_table(). automatically adjusts column alignment, spacing, separators improved readability console outputs. function wraps internal renderer build_ascii_table(), adding optional titles, notes, automatic alignment rules depending type table.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_print_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a spicy-formatted ASCII table — spicy_print_table","text":"","code":"spicy_print_table(   x,   title = attr(x, \"title\"),   note = attr(x, \"note\"),   padding = c(\"compact\", \"normal\", \"wide\"),   first_column_line = TRUE,   row_total_line = TRUE,   column_total_line = TRUE,   bottom_line = TRUE,   lines_color = \"darkgrey\",   align_left_cols = NULL,   ... )"},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_print_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a spicy-formatted ASCII table — spicy_print_table","text":"x spicy_table data.frame printed. title Optional title displayed table. Defaults \"title\" attribute x present. note Optional note displayed table. Defaults \"note\" attribute x present. padding Character string controlling horizontal spacing columns: \"compact\" — minimal spacing \"normal\" — moderate spacing (default) \"wide\" — extra spacing (wide displays) first_column_line Logical; TRUE (default), adds vertical separator first column. row_total_line, column_total_line, bottom_line Logical flags controlling presence horizontal lines total rows/columns bottom table (default: TRUE ). lines_color Character; color table separators (default: \"darkgrey\"). applied output supports ANSI colors (see crayon::has_color()). align_left_cols Integer vector column indices left-align. NULL (default), alignment auto-detected based x: freq tables → c(1, 2) cross tables → 1 ... Additional arguments passed build_ascii_table().","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_print_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a spicy-formatted ASCII table — spicy_print_table","text":"Invisibly returns x, printing formatted ASCII table console.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_print_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a spicy-formatted ASCII table — spicy_print_table","text":"spicy_print_table() detects whether table represents frequencies (freq-style) cross-tabulations (cross-style) adjusts formatting accordingly: frequency tables, first two columns (Category Values) left-aligned. cross tables, first column (row variable) left-aligned. function supports Unicode line-drawing characters colored separators using crayon package, graceful fallback monochrome output color supported.","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_print_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a spicy-formatted ASCII table — spicy_print_table","text":"","code":"# Simple demonstration df <- data.frame(   Category = c(\"Valid\", \"\", \"Missing\", \"Total\"),   Values = c(\"Yes\", \"No\", \"NA\", \"\"),   Freq. = c(12, 8, 1, 21),   Percent = c(57.1, 38.1, 4.8, 100.0) )  spicy_print_table(df,   title = \"Frequency table: Example\",   note = \"Class: data.frame\\nData: demo\" ) #> Frequency table: Example #>  Category │ Values  Freq.  Percent  #> ──────────┼──────────────────────── #>  Valid    │ Yes        12     57.1  #>           │ No          8     38.1  #>  Missing  │ NA          1      4.8  #> ──────────┼──────────────────────── #>  Total    │            21      100  #> ──────────┴──────────────────────── #> Class: data.frame #> Data: demo"},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Spicy Table Engine: Frequency and Cross-tabulation Rendering — spicy_tables","title":"Spicy Table Engine: Frequency and Cross-tabulation Rendering — spicy_tables","text":"spicy table engine provides cohesive set tools creating printing formatted ASCII tables R, designed descriptive statistics. Functions family include: freq() — frequency tables support weights, labelled data, cumulative percentages spicy_print_table() — general-purpose ASCII table printer build_ascii_table() — internal rendering engine column alignment formatting","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spicy Table Engine: Frequency and Cross-tabulation Rendering — spicy_tables","text":"functions family share common philosophy: Console-friendly display Unicode box-drawing characters Consistent alignment spacing across outputs Automatic detection variable type (factor, labelled, numeric) Optional integration variable labels weighting information","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_tables.html","id":"core-functions","dir":"Reference","previous_headings":"","what":"Core functions","title":"Spicy Table Engine: Frequency and Cross-tabulation Rendering — spicy_tables","text":"freq() — Main entry point generating frequency tables. spicy_print_table() — Applies formatting optional titles notes. build_ascii_table() — Internal engine handling padding, alignment, box rules.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/spicy_tables.html","id":"output-styling","dir":"Reference","previous_headings":"","what":"Output styling","title":"Spicy Table Engine: Frequency and Cross-tabulation Rendering — spicy_tables","text":"spicy table engine supports multiple padding options via padding: \"compact\" (default), \"normal\", \"wide\". Horizontal vertical rules can customized, colors supported terminal allows ANSI color output (via crayon package).","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Sums with Optional Minimum Valid Values — sum_n","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"sum_n() computes row sums data.frame matrix, handling missing values (NAs) automatically. Row-wise sums calculated across selected numeric columns, optional condition minimum number (proportion) valid (non-missing) values required row included. Non-numeric columns excluded automatically reported.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"","code":"sum_n(   data = NULL,   select = dplyr::everything(),   exclude = NULL,   min_valid = NULL,   digits = NULL,   regex = FALSE,   verbose = FALSE )"},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"data data.frame matrix. select Columns include. regex = FALSE, use tidyselect syntax (default: dplyr::everything()). regex = TRUE, provide regular expression pattern (character string). exclude Columns exclude (default: NULL). min_valid Minimum number valid (non-NA) values required per row. proportion, applied number selected columns. digits Optional number decimal places round result. regex TRUE, select argument treated regular expression. FALSE, uses tidyselect helpers. verbose TRUE, prints message processing.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"numeric vector row-wise sums","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"","code":"library(dplyr)  # Create a simple numeric data frame df <- tibble(   var1 = c(10, NA, 30, 40, 50),   var2 = c(5, NA, 15, NA, 25),   var3 = c(NA, 30, 20, 50, 10) )  # Compute row-wise sums (all values must be valid by default) sum_n(df) #> [1] NA NA 65 NA 85  # Require at least 2 valid (non-NA) values per row sum_n(df, min_valid = 2) #> [1] 15 NA 65 90 85  # Require at least 50% valid (non-NA) values per row sum_n(df, min_valid = 0.5) #> [1] 15 NA 65 90 85  # Round the results to 1 decimal sum_n(df, digits = 1) #> [1] NA NA 65 NA 85  # Select specific columns sum_n(df, select = c(var1, var2)) #> [1] 15 NA 45 NA 75  # Select specific columns using a pipe df |>   select(var1, var2) |>   sum_n() #> [1] 15 NA 45 NA 75  # Exclude a column sum_n(df, exclude = \"var3\") #> [1] 15 NA 45 NA 75  # Select columns ending with \"1\" sum_n(df, select = ends_with(\"1\")) #> [1] 10 NA 30 40 50  # Use with native pipe df |> sum_n(select = starts_with(\"var\")) #> [1] NA NA 65 NA 85  # Use inside dplyr::mutate() df |> mutate(sum_score = sum_n(min_valid = 2)) #> # A tibble: 5 × 4 #>    var1  var2  var3 sum_score #>   <dbl> <dbl> <dbl>     <dbl> #> 1    10     5    NA        15 #> 2    NA    NA    30        NA #> 3    30    15    20        65 #> 4    40    NA    50        90 #> 5    50    25    10        85  # Select columns directly inside mutate() df |> mutate(sum_score = sum_n(select = c(var1, var2), min_valid = 1)) #> # A tibble: 5 × 4 #>    var1  var2  var3 sum_score #>   <dbl> <dbl> <dbl>     <dbl> #> 1    10     5    NA        15 #> 2    NA    NA    30        NA #> 3    30    15    20        45 #> 4    40    NA    50        40 #> 5    50    25    10        75  # Select columns before mutate df |>   select(var1, var2) |>   mutate(sum_score = sum_n(min_valid = 1)) #> # A tibble: 5 × 3 #>    var1  var2 sum_score #>   <dbl> <dbl>     <dbl> #> 1    10     5        15 #> 2    NA    NA        NA #> 3    30    15        45 #> 4    40    NA        40 #> 5    50    25        75  # Show verbose message df |> mutate(sum_score = sum_n(min_valid = 2, digits = 1, verbose = TRUE)) #> sum_n(): Row sums computed with min_valid = 2, regex = FALSE #> # A tibble: 5 × 4 #>    var1  var2  var3 sum_score #>   <dbl> <dbl> <dbl>     <dbl> #> 1    10     5    NA        15 #> 2    NA    NA    30        NA #> 3    30    15    20        65 #> 4    40    NA    50        90 #> 5    50    25    10        85  # Add character and grouping columns df_mixed <- mutate(df,   name = letters[1:5],   group = c(\"A\", \"A\", \"B\", \"B\", \"A\") ) df_mixed #> # A tibble: 5 × 5 #>    var1  var2  var3 name  group #>   <dbl> <dbl> <dbl> <chr> <chr> #> 1    10     5    NA a     A     #> 2    NA    NA    30 b     A     #> 3    30    15    20 c     B     #> 4    40    NA    50 d     B     #> 5    50    25    10 e     A      # Non-numeric columns are ignored sum_n(df_mixed) #> sum_n(): Ignored non-numeric columns: name, group #> [1] NA NA 65 NA 85  # Use inside mutate with mixed data df_mixed |> mutate(sum_score = sum_n(select = starts_with(\"var\"))) #> # A tibble: 5 × 6 #>    var1  var2  var3 name  group sum_score #>   <dbl> <dbl> <dbl> <chr> <chr>     <dbl> #> 1    10     5    NA a     A            NA #> 2    NA    NA    30 b     A            NA #> 3    30    15    20 c     B            65 #> 4    40    NA    50 d     B            NA #> 5    50    25    10 e     A            85  # Use everything(), but exclude known non-numeric sum_n(df_mixed, select = everything(), exclude = \"group\") #> sum_n(): Ignored non-numeric columns: name #> [1] NA NA 65 NA 85  # Select columns using regex sum_n(df_mixed, select = \"^var\", regex = TRUE) #> [1] NA NA 65 NA 85 sum_n(df_mixed, select = \"ar\", regex = TRUE) #> [1] NA NA 65 NA 85  # Apply to a subset of rows df_mixed[1:3, ] |> sum_n(select = starts_with(\"var\")) #> [1] NA NA 65  # Store the result in a new column df_mixed$sum_score <- sum_n(df_mixed, select = starts_with(\"var\")) df_mixed #> # A tibble: 5 × 6 #>    var1  var2  var3 name  group sum_score #>   <dbl> <dbl> <dbl> <chr> <chr>     <dbl> #> 1    10     5    NA a     A            NA #> 2    NA    NA    30 b     A            NA #> 3    30    15    20 c     B            65 #> 4    40    NA    50 d     B            NA #> 5    50    25    10 e     A            85  # With a numeric matrix mat <- matrix(c(1, 2, NA, 4, 5, NA, 7, 8, 9), nrow = 3, byrow = TRUE) mat #>      [,1] [,2] [,3] #> [1,]    1    2   NA #> [2,]    4    5   NA #> [3,]    7    8    9 mat |> sum_n(min_valid = 2) #> [1]  3  9 24"},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a comprehensive summary of the variables — varlist","title":"Generate a comprehensive summary of the variables — varlist","text":"varlist() lists variables data frame extracts essential metadata, including variable names, labels, summary values, classes, number distinct values, number valid (non-missing) observations, number missing values. vl() convenient shorthand varlist() offers identical functionality shorter name.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a comprehensive summary of the variables — varlist","text":"","code":"varlist(   x,   ...,   values = FALSE,   tbl = FALSE,   include_na = FALSE,   .raw_expr = substitute(x) )  vl(x, ..., values = FALSE, tbl = FALSE, include_na = FALSE)"},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a comprehensive summary of the variables — varlist","text":"x data frame transformation one. Must named identifiable. ... Optional tidyselect-style column selectors (e.g. starts_with(\"var\"), (.numeric), etc.). values Logical. FALSE (default), min/max representative values displayed. TRUE, unique values listed. tbl Logical. FALSE (default), summary opened Viewer (interactive). TRUE, tibble returned instead. include_na Logical. TRUE, missing values (NA) included Values column. Default FALSE. .raw_expr Internal. use. Captures original expression vl() generate informative title. Used internal purposes.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a comprehensive summary of the variables — varlist","text":"tibble one row per (selected) variable, containing following columns: Variable: variable names Label: variable labels (available via label attribute) Values: summary variable's values, depending values include_na arguments. values = FALSE, compact summary (max 4 values: 3 + ... + last) shown. values = TRUE, unique non-missing values displayed. labelled variables, prefixed labels displayed using labelled::to_factor(levels = \"prefixed\"). factors, levels used -. Missing values (NA, NaN) optionally appended end (controlled via include_na). Class: class variable (possibly multiple, e.g. \"labelled\", \"numeric\") Ndist_val: number distinct non-missing values N_valid: number non-missing observations NAs: number missing observations tbl = FALSE used interactively, summary displayed Viewer pane. data frame transformation (e.g. head(df) df[ , 1:3]), asterisk (*) appended name title (e.g. VARLIST df*).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a comprehensive summary of the variables — varlist","text":"function can also apply tidyselect-style variable selectors filter columns dynamically. used interactively (e.g. RStudio), summary displayed Viewer pane contextual title like VARLIST iris. data frame transformed subsetted, title display asterisk (*), e.g. VARLIST iris*. full documentation, see varlist().","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a comprehensive summary of the variables — varlist","text":"","code":"varlist(iris) #> Non-interactive session: use `tbl = TRUE` to return the table. iris |> varlist() #> Non-interactive session: use `tbl = TRUE` to return the table. iris |> varlist(starts_with(\"Sepal\"), tbl = TRUE) #> # A tibble: 2 × 7 #>   Variable     Label Values                  Class   Ndist_val N_valid   NAs #>   <chr>        <chr> <chr>                   <chr>       <int>   <int> <int> #> 1 Sepal.Length NA    4.3, 4.4, 4.5, ..., 7.9 numeric        35     150     0 #> 2 Sepal.Width  NA    2, 2.2, 2.3, ..., 4.4   numeric        23     150     0 varlist(mtcars, where(is.numeric), values = TRUE, tbl = TRUE) #> # A tibble: 11 × 7 #>    Variable Label Values                           Class Ndist_val N_valid   NAs #>    <chr>    <chr> <chr>                            <chr>     <int>   <int> <int> #>  1 mpg      NA    10.4, 13.3, 14.3, 14.7, 15, 15.… nume…        25      32     0 #>  2 cyl      NA    4, 6, 8                          nume…         3      32     0 #>  3 disp     NA    71.1, 75.7, 78.7, 79, 95.1, 108… nume…        27      32     0 #>  4 hp       NA    52, 62, 65, 66, 91, 93, 95, 97,… nume…        22      32     0 #>  5 drat     NA    2.76, 2.93, 3, 3.07, 3.08, 3.15… nume…        22      32     0 #>  6 wt       NA    1.513, 1.615, 1.835, 1.935, 2.1… nume…        29      32     0 #>  7 qsec     NA    14.5, 14.6, 15.41, 15.5, 15.84,… nume…        30      32     0 #>  8 vs       NA    0, 1                             nume…         2      32     0 #>  9 am       NA    0, 1                             nume…         2      32     0 #> 10 gear     NA    3, 4, 5                          nume…         3      32     0 #> 11 carb     NA    1, 2, 3, 4, 6, 8                 nume…         6      32     0 varlist(head(mtcars), tbl = TRUE) #> # A tibble: 11 × 7 #>    Variable Label Values                          Class  Ndist_val N_valid   NAs #>    <chr>    <chr> <chr>                           <chr>      <int>   <int> <int> #>  1 mpg      NA    18.1, 18.7, 21, ..., 22.8       numer…         5       6     0 #>  2 cyl      NA    4, 6, 8                         numer…         3       6     0 #>  3 disp     NA    108, 160, 225, ..., 360         numer…         5       6     0 #>  4 hp       NA    93, 105, 110, 175               numer…         4       6     0 #>  5 drat     NA    2.76, 3.08, 3.15, ..., 3.9      numer…         5       6     0 #>  6 wt       NA    2.32, 2.62, 2.875, ..., 3.46    numer…         6       6     0 #>  7 qsec     NA    16.46, 17.02, 18.61, ..., 20.22 numer…         5       6     0 #>  8 vs       NA    0, 1                            numer…         2       6     0 #>  9 am       NA    0, 1                            numer…         2       6     0 #> 10 gear     NA    3, 4                            numer…         2       6     0 #> 11 carb     NA    1, 2, 4                         numer…         3       6     0 varlist(mtcars, tbl = TRUE) #> # A tibble: 11 × 7 #>    Variable Label Values                          Class  Ndist_val N_valid   NAs #>    <chr>    <chr> <chr>                           <chr>      <int>   <int> <int> #>  1 mpg      NA    10.4, 13.3, 14.3, ..., 33.9     numer…        25      32     0 #>  2 cyl      NA    4, 6, 8                         numer…         3      32     0 #>  3 disp     NA    71.1, 75.7, 78.7, ..., 472      numer…        27      32     0 #>  4 hp       NA    52, 62, 65, ..., 335            numer…        22      32     0 #>  5 drat     NA    2.76, 2.93, 3, ..., 4.93        numer…        22      32     0 #>  6 wt       NA    1.513, 1.615, 1.835, ..., 5.424 numer…        29      32     0 #>  7 qsec     NA    14.5, 14.6, 15.41, ..., 22.9    numer…        30      32     0 #>  8 vs       NA    0, 1                            numer…         2      32     0 #>  9 am       NA    0, 1                            numer…         2      32     0 #> 10 gear     NA    3, 4, 5                         numer…         3      32     0 #> 11 carb     NA    1, 2, 3, ..., 8                 numer…         6      32     0 varlist(iris[, 1:3], tbl = TRUE) #> # A tibble: 3 × 7 #>   Variable     Label Values                  Class   Ndist_val N_valid   NAs #>   <chr>        <chr> <chr>                   <chr>       <int>   <int> <int> #> 1 Sepal.Length NA    4.3, 4.4, 4.5, ..., 7.9 numeric        35     150     0 #> 2 Sepal.Width  NA    2, 2.2, 2.3, ..., 4.4   numeric        23     150     0 #> 3 Petal.Length NA    1, 1.1, 1.2, ..., 6.9   numeric        43     150     0 varlist(mtcars[1:10, ], tbl = TRUE) #> # A tibble: 11 × 7 #>    Variable Label Values                         Class   Ndist_val N_valid   NAs #>    <chr>    <chr> <chr>                          <chr>       <int>   <int> <int> #>  1 mpg      NA    14.3, 18.1, 18.7, ..., 24.4    numeric         8      10     0 #>  2 cyl      NA    4, 6, 8                        numeric         3      10     0 #>  3 disp     NA    108, 140.8, 146.7, ..., 360    numeric         8      10     0 #>  4 hp       NA    62, 93, 95, ..., 245           numeric         8      10     0 #>  5 drat     NA    2.76, 3.08, 3.15, ..., 3.92    numeric         8      10     0 #>  6 wt       NA    2.32, 2.62, 2.875, ..., 3.57   numeric         9      10     0 #>  7 qsec     NA    15.84, 16.46, 17.02, ..., 22.9 numeric         9      10     0 #>  8 vs       NA    0, 1                           numeric         2      10     0 #>  9 am       NA    0, 1                           numeric         2      10     0 #> 10 gear     NA    3, 4                           numeric         2      10     0 #> 11 carb     NA    1, 2, 4                        numeric         3      10     0  vl(iris) #> Non-interactive session: use `tbl = TRUE` to return the table. iris |> vl() #> Non-interactive session: use `tbl = TRUE` to return the table. vl(mtcars, starts_with(\"d\")) #> Non-interactive session: use `tbl = TRUE` to return the table. vl(head(iris), include_na = TRUE) #> Non-interactive session: use `tbl = TRUE` to return the table. vl(iris[, 1:3], values = TRUE, tbl = TRUE) #> # A tibble: 3 × 7 #>   Variable     Label Values                        Class Ndist_val N_valid   NAs #>   <chr>        <chr> <chr>                         <chr>     <int>   <int> <int> #> 1 Sepal.Length NA    4.3, 4.4, 4.5, 4.6, 4.7, 4.8… nume…        35     150     0 #> 2 Sepal.Width  NA    2, 2.2, 2.3, 2.4, 2.5, 2.6, … nume…        23     150     0 #> 3 Petal.Length NA    1, 1.1, 1.2, 1.3, 1.4, 1.5, … nume…        43     150     0"},{"path":"https://amaltawfik.github.io/spicy/news/index.html","id":"spicy-040-in-development","dir":"Changelog","previous_headings":"","what":"spicy 0.4.0 (in development)","title":"spicy 0.4.0 (in development)","text":"print.spicy() fully redesigned produce clean, aligned ASCII tables inspired Stata’s layout. new implementation improves formatting, adds optional color support, provides consistent handling totals column spacing. Output freq() cross_tab() now benefits enhanced print.spicy() formatting, offering clearer, readable summary tables. Documentation internal tests updated clarity consistency.","code":""},{"path":"https://amaltawfik.github.io/spicy/news/index.html","id":"spicy-030","dir":"Changelog","previous_headings":"","what":"spicy 0.3.0","title":"spicy 0.3.0","text":"CRAN release: 2025-10-22 New function code_book(), generates comprehensive variable codebook can viewed interactively exported multiple formats (copy, print, CSV, Excel, PDF).","code":""},{"path":"https://amaltawfik.github.io/spicy/news/index.html","id":"spicy-021","dir":"Changelog","previous_headings":"","what":"spicy 0.2.1","title":"spicy 0.2.1","text":"CRAN release: 2025-10-04 label_from_names() now correctly handles edge cases separator appears label missing.","code":""},{"path":"https://amaltawfik.github.io/spicy/news/index.html","id":"spicy-020","dir":"Changelog","previous_headings":"","what":"spicy 0.2.0","title":"spicy 0.2.0","text":"CRAN release: 2025-09-25 New function label_from_names() derive assign variable labels headers form \"name<sep>label\" (e.g. \"name. label\"). Especially useful LimeSurvey CSV exports (Export results → CSV → Headings: Question code & question text), default separator \". \".","code":""},{"path":"https://amaltawfik.github.io/spicy/news/index.html","id":"spicy-010","dir":"Changelog","previous_headings":"","what":"spicy 0.1.0","title":"spicy 0.1.0","text":"CRAN release: 2025-05-05","code":""},{"path":"https://amaltawfik.github.io/spicy/news/index.html","id":"initial-release-0-1-0","dir":"Changelog","previous_headings":"","what":"Initial release","title":"spicy 0.1.0","text":"Introduces collection tools variable inspection, descriptive summaries, data exploration. Extract variable metadata display compact summaries (varlist()). Compute frequency tables (freq()), cross-tabulations (cross_tab()), Cramer’s V categorical associations (cramer_v()). Generate descriptive statistics means (mean_n()), sums (sum_n()), counts (count_n()) automatic handling missing data. Copy data (copy_clipboard()) directly clipboard quick export.","code":""}]
