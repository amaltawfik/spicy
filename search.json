[{"path":"https://amaltawfik.github.io/spicy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 spicy authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://amaltawfik.github.io/spicy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Amal Tawfik. Author, maintainer, copyright holder.","code":""},{"path":"https://amaltawfik.github.io/spicy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tawfik (2025). spicy: Descriptive Statistics Data Management Tools. R package version 0.1.0, https://github.com/amaltawfik/spicy/.","code":"@Manual{,   title = {spicy: Descriptive Statistics and Data Management Tools},   author = {Amal Tawfik},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/amaltawfik/spicy/}, }"},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"spicy-","dir":"","previous_headings":"","what":"Descriptive Statistics and Data Management Tools","title":"Descriptive Statistics and Data Management Tools","text":"spicy adds dash heat data analysis, giving insights whole new flavour! designed make variable exploration descriptive statistics fast, expressive, easy use.","code":""},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"what-is-spicy","dir":"","previous_headings":"","what":"What is spicy?","title":"Descriptive Statistics and Data Management Tools","text":"spicy R package quick, consistent, elegant exploration data frames. helps : Extract variable metadata display compact summaries dataset variables, including names, labels, values, classes, number distinct non-missing values, number valid observations, number missing observations (varlist()). Similar “Variable View” SPSS “Variables Manager” Stata. Compute frequency tables (freq()), row means (mean_n()), row sums (sum_n()), row count specific values (count_n()) automatic handling missing data. Explore relationships variables via cross-tabulations (cross_tab()), Cramer’s V categorical associations (cramer_v()). Copy data results directly clipboard (copy_clipboard()) quick export. Handle labelled, factor, Date, POSIXct, common types. intuitive functions produce clean, structured outputs.","code":""},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Descriptive Statistics and Data Management Tools","text":"can install development version spicy GitHub :","code":"# install.packages(\"pak\") pak::pak(\"amaltawfik/spicy\")"},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Descriptive Statistics and Data Management Tools","text":"quick examples using built-datasets: functions can directly used pipelines.","code":"library(spicy)  # Get a summary of all variables varlist(iris, tbl = TRUE)  # Tabulate frequencies freq(iris$Species)  # Cross-tab with row percentages cross_tab(mtcars, cyl, gear, percent = \"row\")  # Compute row-wise mean/sum (all values must be valid by default) df <- data.frame(       var1 = c(10, NA, 30, 40, 50),       var2 = c(5, NA, 15, NA, 25),       var3 = c(NA, 30, 20, 50, 10)       ) mean_n(df) sum_n(df)"},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"why-use-spicy","dir":"","previous_headings":"","what":"Why use spicy?","title":"Descriptive Statistics and Data Management Tools","text":"Clean, expressive output Works well labelled survey data Handles weights, percentages, NA counts Great exploring data variables, teaching, reporting","code":""},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Descriptive Statistics and Data Management Tools","text":"use spicy publication teaching material, please cite : Tawfik, . (2025). spicy: Tools Data Management Variable Exploration. R package version 0.1.0. https://github.com/amaltawfik/spicy can also get citation R format typing:","code":"citation(\"spicy\")"},{"path":"https://amaltawfik.github.io/spicy/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Descriptive Statistics and Data Management Tools","text":"package licensed MIT license. See LICENSE details.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy data to the clipboard — copy_clipboard","title":"Copy data to the clipboard — copy_clipboard","text":"copy_clipboard() copies data frame, matrix, array (2D higher), table vector clipboard. can paste result text editor (e.g. Notepad++, Sublime Text), spreadsheet (e.g. Excel, LibreOffice Calc), word processor (e.g. Word).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy data to the clipboard — copy_clipboard","text":"","code":"copy_clipboard(   x,   row.names.as.col = FALSE,   row.names = TRUE,   col.names = TRUE,   message = TRUE,   quiet = FALSE,   ... )"},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy data to the clipboard — copy_clipboard","text":"x data frame, matrix, 2D array, 3D array, table, atomic vector copied. row.names..col Logical character. FALSE (default), row names added column. TRUE, column named \"rownames\" prepended. character string supplied, used column name row names. row.names Logical. TRUE (default), includes row names clipboard output. FALSE, row names omitted. col.names Logical. TRUE (default), includes column names clipboard output. FALSE, column names omitted. message Logical. TRUE (default), displays success message copying. FALSE, success message printed. quiet Logical. TRUE, suppresses messages, including success, coercion notices, warnings. FALSE (default), messages shown. ... Additional arguments passed clipr::write_clip().","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy data to the clipboard — copy_clipboard","text":"Invisibly returns object x. main purpose side effect copying data clipboard.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy data to the clipboard — copy_clipboard","text":"Note: Objects data frames 2D matrices (e.g. atomic vectors, arrays, tables) automatically converted character copied clipboard, required clipr::write_clip(). original object R remains unchanged. multidimensional arrays (e.g. 3D arrays), entire array flattened 1D character vector, element new line. preserve tabular structure, extract 2D slice copying. example: copy_clipboard(my_array[, , 1]).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/copy_clipboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy data to the clipboard — copy_clipboard","text":"","code":"if (FALSE) { # \\dontrun{ # Data frame copy_clipboard(mtcars)  # Data frame with row names as column copy_clipboard(mtcars, row.names.as.col = \"car\")  # Matrix mat <- matrix(1:6, nrow = 2) copy_clipboard(mat)  # Table tbl <- table(iris$Species) copy_clipboard(tbl)  # Array (3D) — flattened to character arr <- array(1:8, dim = c(2, 2, 2)) copy_clipboard(arr)  # Recommended: copy 2D slice for tabular layout copy_clipboard(arr[, , 1])  # Numeric vector copy_clipboard(c(3.14, 2.71, 1.618))  # Character vector copy_clipboard(c(\"apple\", \"banana\", \"cherry\"))  # Quiet mode (no messages shown) copy_clipboard(mtcars, quiet = TRUE) } # }"},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-wise Count of Specific or Special Values — count_n","title":"Row-wise Count of Specific or Special Values — count_n","text":"count_n() counts, row data frame matrix, many times one values appear across selected columns. supports type-safe comparison, case-insensitive string matching, detection special values NA, NaN, Inf, -Inf.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-wise Count of Specific or Special Values — count_n","text":"","code":"count_n(   data = NULL,   select = tidyselect::everything(),   exclude = NULL,   count = NULL,   special = NULL,   allow_coercion = TRUE,   ignore_case = FALSE,   regex = FALSE,   verbose = FALSE )"},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-wise Count of Specific or Special Values — count_n","text":"data data frame matrix. Optional inside mutate(). select Columns include. Uses tidyselect helpers like tidyselect::everything(), tidyselect::starts_with(), etc. regex = TRUE, select treated regex string. exclude Character vector column names exclude selection. count Value(s) count. Ignored special used. Multiple values allowed (e.g., count = c(1, 2, 3) count = c(\"yes\", \"\")). R automatically coerces values count common type (e.g., c(2, \"2\") becomes c(\"2\", \"2\")), values expected final type. allow_coercion = FALSE, matching type-safe using identical(), type count must match values data. special Character vector special values count: \"NA\", \"NaN\", \"Inf\", \"-Inf\", \"\". \"NA\" uses .na(), therefore includes NA NaN values. \"NaN\" uses .nan() match actual NaN values. allow_coercion Logical (default TRUE). FALSE, uses strict matching via identical(). ignore_case Logical (default FALSE). TRUE, performs case-insensitive string comparisons. regex Logical (default FALSE). TRUE, interprets select regular expression pattern. verbose Logical (default FALSE). TRUE, prints processing messages.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-wise Count of Specific or Special Values — count_n","text":"numeric vector row-wise counts (unnamed).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Row-wise Count of Specific or Special Values — count_n","text":"function particularly useful summarizing data quality patterns row-wise structures, designed work fluently inside dplyr::mutate() pipelines. Internally, count_n() wraps stable dependency-free base function base_count_n(), allowing high flexibility testability.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Row-wise Count of Specific or Special Values — count_n","text":"function inspired datawizard::row_count(), provides additional flexibility: Element-wise type-safe matching using identical() allow_coercion = FALSE. ensures value type match exactly, enabling precise comparisons mixed-type columns. Support multiple values count, allowing queries like count = c(2, 3) count = c(\"yes\", \"\") count several values per row. Detection special values NA, NaN, Inf, -Inf special argument — feature available row_count(). Tidyverse-native behavior: can used inside mutate() without explicitly passing data argument.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"value-coercion-behavior","dir":"Reference","previous_headings":"","what":"Value coercion behavior","title":"Row-wise Count of Specific or Special Values — count_n","text":"R automatically coerces mixed-type vectors passed count common type. example, count = c(2, \"2\") becomes c(\"2\", \"2\"), R converts numeric character values unified type. means mixed-type checks possible runtime count passed function. ensure accurate type-sensitive matching, users avoid mixing types count explicitly.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"strict-matching-mode-allow-coercion-false-","dir":"Reference","previous_headings":"","what":"Strict matching mode (allow_coercion = FALSE)","title":"Row-wise Count of Specific or Special Values — count_n","text":"strict matching enabled, value count must match type target column exactly. factor columns, means count must also factor. Supplying count = \"b\" (character string) match factor value, even label appears identical. common intuitive approach use count = factor(\"b\"), works many cases. However, identical() — used internally strict comparisons — also checks internal structure factor, including order content levels. result, comparisons may still fail levels differ, even label . ensure perfect match (label levels), can reuse value taken directly data (e.g., df$x[2]). guarantees class factor levels align. However, approach works reliably selected columns factor structure.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"case-insensitive-matching-ignore-case-true-","dir":"Reference","previous_headings":"","what":"Case-insensitive matching (ignore_case = TRUE)","title":"Row-wise Count of Specific or Special Values — count_n","text":"ignore_case = TRUE, values involved comparison converted lowercase using tolower() matching. behavior applies character factor columns. Factors first converted character internally. Importantly, case-insensitive mode takes precedence strict type comparison: values longer compared using identical(), rather using lowercase string equality. enables flexible matching — example, \"b\" \"B\" match even allow_coercion = FALSE.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"example-strict-vs-case-insensitive-matching-with-factors","dir":"Reference","previous_headings":"","what":"Example: strict vs. case-insensitive matching with factors","title":"Row-wise Count of Specific or Special Values — count_n","text":"Like datawizard::row_count(), function also supports regex-based column selection, case-insensitive string comparison, column exclusion.","code":"df <- tibble::tibble(   x = factor(c(\"a\", \"b\", \"c\")),   y = factor(c(\"b\", \"B\", \"a\")) )  # Strict match fails with character input count_n(df, count = \"b\", allow_coercion = FALSE) #> [1] 0 0 0  # Match works only where factor levels match exactly count_n(df, count = factor(\"b\", levels = levels(df$x)), allow_coercion = FALSE) #> [1] 0 1 0  # Case-insensitive match succeeds for both \"b\" and \"B\" count_n(df, count = \"b\", ignore_case = TRUE) #> [1] 1 2 0"},{"path":"https://amaltawfik.github.io/spicy/reference/count_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row-wise Count of Specific or Special Values — count_n","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tibble) library(haven)  # Basic usage df <- tibble(   x = c(1, 2, 2, 3, NA),   y = c(2, 2, NA, 3, 2),   z = c(\"2\", \"2\", \"2\", \"3\", \"2\") ) df #> # A tibble: 5 × 3 #>       x     y z     #>   <dbl> <dbl> <chr> #> 1     1     2 2     #> 2     2     2 2     #> 3     2    NA 2     #> 4     3     3 3     #> 5    NA     2 2     count_n(df, count = 2) #> [1] 2 3 2 0 2 count_n(df, count = 2, allow_coercion = FALSE) #> [1] 1 2 1 0 1 count_n(df, count = \"2\", ignore_case = TRUE) #> [1] 2 3 2 0 2 df |> mutate(num_twos = count_n(count = 2)) #> # A tibble: 5 × 4 #>       x     y z     num_twos #>   <dbl> <dbl> <chr>    <dbl> #> 1     1     2 2            2 #> 2     2     2 2            3 #> 3     2    NA 2            2 #> 4     3     3 3            0 #> 5    NA     2 2            2  # Mixed types and special values df <- tibble(   num   = c(1, 2, NA, -Inf, NaN),   char  = c(\"a\", \"B\", \"b\", \"a\", NA),   fact  = factor(c(\"a\", \"b\", \"b\", \"a\", \"c\")),   date  = as.Date(c(\"2023-01-01\", \"2023-01-01\", NA, \"2023-01-02\", \"2023-01-01\")),   lab   = labelled(c(1, 2, 1, 2, NA), labels = c(No = 1, Yes = 2)),   logic = c(TRUE, FALSE, NA, TRUE, FALSE) ) df #> # A tibble: 5 × 6 #>     num char  fact  date       lab       logic #>   <dbl> <chr> <fct> <date>     <dbl+lbl> <lgl> #> 1     1 a     a     2023-01-01  1 [No]   TRUE  #> 2     2 B     b     2023-01-01  2 [Yes]  FALSE #> 3    NA b     b     NA          1 [No]   NA    #> 4  -Inf a     a     2023-01-02  2 [Yes]  TRUE  #> 5   NaN NA    c     2023-01-01 NA        FALSE count_n(df, count = 2) #> [1] 0 2 0 1 0 count_n(df, count = 2, allow_coercion = FALSE) #> [1] 0 1 0 0 0 count_n(df, count = \"b\", ignore_case = FALSE) #> [1] 0 1 2 0 0 count_n(df, count = \"b\", ignore_case = TRUE) #> [1] 0 2 2 0 0 count_n(df, count = \"a\", select = fact) #> [1] 1 0 0 1 0 count_n(df, count = as.Date(\"2023-01-01\"), select = date) #> [1] 1 1 0 0 1 count_n(df, count = TRUE, select = logic) #> [1] 1 0 0 1 0 count_n(df, count = 2, select = lab) #> [1] 0 1 0 1 0 df <- df |> mutate(lab_chr = as_factor(lab)) count_n(df, count = \"Yes\", select = lab_chr, allow_coercion = TRUE) #> [1] 0 1 0 1 0 count_n(df, count = \"Yes\", select = lab_chr, allow_coercion = FALSE) #> [1] 0 0 0 0 0  # Count special values count_n(df, special = \"NA\") #> [1] 0 0 3 0 4 count_n(df, special = \"NaN\") #> [1] 0 0 0 0 1 count_n(df, special = \"-Inf\") #> [1] 0 0 0 1 0 count_n(df, special = c(\"NA\", \"NaN\")) #> [1] 0 0 3 0 4 count_n(df, special = \"all\") #> [1] 0 0 3 1 4  # Column selection strategies df <- tibble(   score_math    = c(1, 2, 2, 3, NA),   score_science = c(2, 2, NA, 3, 2),   score_lang    = c(\"2\", \"2\", \"2\", \"3\", \"2\"),   name          = c(\"Jean\", \"Marie\", \"Ali\", \"Zoe\", \"Nina\") ) df #> # A tibble: 5 × 4 #>   score_math score_science score_lang name  #>        <dbl>         <dbl> <chr>      <chr> #> 1          1             2 2          Jean  #> 2          2             2 2          Marie #> 3          2            NA 2          Ali   #> 4          3             3 3          Zoe   #> 5         NA             2 2          Nina  count_n(df, select = c(score_math, score_science), count = 2) #> [1] 1 2 1 0 1 count_n(df, select = starts_with(\"score_\"), exclude = \"score_lang\", count = 2) #> [1] 1 2 1 0 1 count_n(df, select = everything(), exclude = \"name\", count = 2) #> [1] 2 3 2 0 2 count_n(df, select = \"^score_\", regex = TRUE, count = 2) #> [1] 2 3 2 0 2 count_n(df, select = \"lang\", regex = TRUE, count = \"2\") #> [1] 1 1 1 0 1 df |> mutate(nb_two = count_n(count = 2)) #> # A tibble: 5 × 5 #>   score_math score_science score_lang name  nb_two #>        <dbl>         <dbl> <chr>      <chr>  <dbl> #> 1          1             2 2          Jean       2 #> 2          2             2 2          Marie      3 #> 3          2            NA 2          Ali        2 #> 4          3             3 3          Zoe        0 #> 5         NA             2 2          Nina       2 df |> select(score_math, score_science) |> mutate(nb_two = count_n(count = 2)) #> # A tibble: 5 × 3 #>   score_math score_science nb_two #>        <dbl>         <dbl>  <dbl> #> 1          1             2      1 #> 2          2             2      2 #> 3          2            NA      1 #> 4          3             3      0 #> 5         NA             2      1 df$nb_two <- count_n(df, select = starts_with(\"score_\"), count = 2) df[1:3, ] |> count_n(select = starts_with(\"score_\"), count = 2) #> [1] 2 3 2  # Strict type-safe matching with factor columns df <- tibble(   x = factor(c(\"a\", \"b\", \"c\")),   y = factor(c(\"b\", \"B\", \"a\")) ) df #> # A tibble: 3 × 2 #>   x     y     #>   <fct> <fct> #> 1 a     b     #> 2 b     B     #> 3 c     a      # Coercion: character \"b\" matches both x and y count_n(df, count = \"b\") #> [1] 1 1 0  # Strict match: fails because \"b\" is character, not factor (returns only 0s) count_n(df, count = \"b\", allow_coercion = FALSE) #> [1] 0 0 0  # Strict match with factor value: works only where levels match count_n(df, count = factor(\"b\", levels = levels(df$x)), allow_coercion = FALSE) #> [1] 0 1 0  # Using a value from the data: guarantees type and levels match for column x count_n(df, count = df$x[2], allow_coercion = FALSE) #> [1] 0 1 0  # Case-insensitive match (factors are converted to character internally) count_n(df, count = \"b\", ignore_case = TRUE) #> [1] 1 2 0 count_n(df, count = \"B\", ignore_case = TRUE) #> [1] 1 2 0"},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cramer's V — cramer_v","title":"Compute Cramer's V — cramer_v","text":"cramer_v() computes Cramer's V two-way frequency table, measuring strength association two categorical variables.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cramer's V — cramer_v","text":"","code":"cramer_v(x)"},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cramer's V — cramer_v","text":"x contingency table (class table) compute statistic.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cramer's V — cramer_v","text":"numeric vector length 1, representing Cramer's V statistic.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cramer's V — cramer_v","text":"Cramer's V based chi-squared statistic adjusts size table. suitable nominal (unordered categorical) variables.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cramer_v.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cramer's V — cramer_v","text":"","code":"# Example with mtcars dataset data(mtcars)  # Discretize continuous variables mtcars$gear <- as.factor(mtcars$gear) mtcars$cyl <- as.factor(mtcars$cyl)  # Create contingency table tab <- table(mtcars$gear, mtcars$cyl)  # Compute Cramer's V cramer_v(tab) #> Warning: Chi-squared approximation may be incorrect #> [1] 0.5308655"},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-Tabulation with Percentages, Weights, and Grouping — cross_tab","title":"Cross-Tabulation with Percentages, Weights, and Grouping — cross_tab","text":"cross_tab() produces cross-tabulation x y, optional stratification using grouping variable (). supports weighted frequencies, row column percentages, association statistics (Chi-squared test, Cramer's V).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-Tabulation with Percentages, Weights, and Grouping — cross_tab","text":"","code":"cross_tab(   d = parent.frame(),   x,   y = NULL,   by = NULL,   weights = NULL,   rescale_weights = FALSE,   digits = 1,   rowprct = FALSE,   row_total = TRUE,   column_total = TRUE,   n = TRUE,   drop = TRUE,   include_stats = TRUE,   combine = FALSE,   ... )  ct(   d = parent.frame(),   x,   y = NULL,   by = NULL,   weights = NULL,   rescale_weights = FALSE,   digits = 1,   rowprct = FALSE,   row_total = TRUE,   column_total = TRUE,   n = TRUE,   drop = TRUE,   include_stats = TRUE,   combine = FALSE,   ... )"},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-Tabulation with Percentages, Weights, and Grouping — cross_tab","text":"d data.frame, vector (using vector input). Must contain variables used x, y, , weights. x Variable table rows. Can unquoted (tidy) quoted (standard). Must match column name d data frame. y Optional variable table columns. rules x. NULL, computes one-way frequency table. Optional grouping variable (interaction variables). Used produce stratified crosstabs. Must refer columns d, vector length x. weights Optional numeric vector weights. Must match length x. rescale_weights Logical. TRUE, rescales weights total weighted count matches unweighted count. digits Integer. Number decimal places shown percentages. Default 1. rowprct Logical. TRUE, computes percentages row; otherwise column. row_total Logical. TRUE, adds row totals (default TRUE). column_total Logical. TRUE, adds column totals (default TRUE). n Logical. TRUE, displays effective counts N extra row column (default TRUE). drop Logical. TRUE, drops empty rows columns (default TRUE). include_stats Logical. TRUE, includes Chi-squared test Cramer's V possible (default TRUE). combine Logical. TRUE, combines stratified tables one tibble column. ... Additional arguments passed print.spicy(), show_all = TRUE","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-Tabulation with Percentages, Weights, and Grouping — cross_tab","text":"tibble class spicy, list tibbles combine = FALSE used.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-Tabulation with Percentages, Weights, and Grouping — cross_tab","text":"function flexible: Accepts standard (quoted) tidy (unquoted) variable input Performs stratified tabulations using grouping variable () Optionally combines group-level tables single tibble combine = TRUE Pipe-friendly base R (|>) magrittr (%>%) variables (x, y, , weights) must present data frame d (unless vector input used).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"warnings-and-errors","dir":"Reference","previous_headings":"","what":"Warnings and Errors","title":"Cross-Tabulation with Percentages, Weights, and Grouping — cross_tab","text":"weights non-numeric, error thrown. weights match number observations, error thrown. rescale_weights = TRUE weights provided, warning issued. values NA, error thrown. one unique level (NA), warning issued.","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/cross_tab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-Tabulation with Percentages, Weights, and Grouping — cross_tab","text":"","code":"data(mtcars) mtcars$gear <- factor(mtcars$gear) mtcars$cyl <- factor(mtcars$cyl) mtcars$vs <- factor(mtcars$vs, labels = c(\"V\", \"S\")) mtcars$am <- factor(mtcars$am, labels = c(\"auto\", \"manual\"))  # Basic usage cross_tab(mtcars, cyl, gear) #> Crosstable: cyl x gear (%) #> ───────────────────────────────────────── #>  Values           3     4     5 Row_Total #> ───────────────────────────────────────── #>  4              6.7  66.7  40.0      34.4 #>  6             13.3  33.3  20.0      21.9 #>  8             80.0   0.0  40.0      43.8 #>  Column_Total 100.0 100.0 100.0     100.0 #>  N             15.0  12.0   5.0      32.0 #> ───────────────────────────────────────── #> Chi-2 = 18 (df = 4), p = 0.00121, Cramer's V = 0.53  # Using extracted variables cross_tab(mtcars$cyl, mtcars$gear) #> Crosstable: cyl x gear (%) #> ───────────────────────────────────────── #>  Values           3     4     5 Row_Total #> ───────────────────────────────────────── #>  4              6.7  66.7  40.0      34.4 #>  6             13.3  33.3  20.0      21.9 #>  8             80.0   0.0  40.0      43.8 #>  Column_Total 100.0 100.0 100.0     100.0 #>  N             15.0  12.0   5.0      32.0 #> ───────────────────────────────────────── #> Chi-2 = 18 (df = 4), p = 0.00121, Cramer's V = 0.53  # Pipe-friendly syntax mtcars |> cross_tab(cyl, gear, by = am) #> $auto #> Crosstable: cyl x gear | am = auto (%) #> ─────────────────────────────────── #>  Values           3     4 Row_Total #> ─────────────────────────────────── #>  4              6.7  50.0      15.8 #>  6             13.3  50.0      21.1 #>  8             80.0   0.0      63.2 #>  Column_Total 100.0 100.0     100.0 #>  N             15.0   4.0      19.0 #> ─────────────────────────────────── #> Chi-2 = 9 (df = 2), p = 0.0113, Cramer's V = 0.69 #>  #> $manual #> Crosstable: cyl x gear | am = manual (%) #> ─────────────────────────────────── #>  Values           4     5 Row_Total #> ─────────────────────────────────── #>  4             75.0  40.0      61.5 #>  6             25.0  20.0      23.1 #>  8              0.0  40.0      15.4 #>  Column_Total 100.0 100.0     100.0 #>  N              8.0   5.0      13.0 #> ─────────────────────────────────── #> Chi-2 = 3.8 (df = 2), p = 0.146, Cramer's V = 0.54 #>   # With row percentages cross_tab(mtcars, cyl, gear, by = am, rowprct = TRUE) #> $auto #> Crosstable: cyl x gear | am = auto (%) #> ───────────────────────────────────── #>  Values           3    4 Row_Total  N #> ───────────────────────────────────── #>  4             33.3 66.7     100.0  3 #>  6             50.0 50.0     100.0  4 #>  8            100.0  0.0     100.0 12 #>  Column_Total  78.9 21.1     100.0 19 #> ───────────────────────────────────── #> Chi-2 = 9 (df = 2), p = 0.0113, Cramer's V = 0.69 #>  #> $manual #> Crosstable: cyl x gear | am = manual (%) #> ───────────────────────────────────── #>  Values          4     5 Row_Total  N #> ───────────────────────────────────── #>  4            75.0  25.0     100.0  8 #>  6            66.7  33.3     100.0  3 #>  8             0.0 100.0     100.0  2 #>  Column_Total 61.5  38.5     100.0 13 #> ───────────────────────────────────── #> Chi-2 = 3.8 (df = 2), p = 0.146, Cramer's V = 0.54 #>   # Using weights cross_tab(mtcars, cyl, gear, weights = mpg) #> Crosstable: cyl x gear (%) #> ───────────────────────────────────────── #>  Values           3     4     5 Row_Total #> ───────────────────────────────────────── #>  4              8.9  73.2  52.8      45.6 #>  6             16.3  26.8  18.4      21.5 #>  8             74.8   0.0  28.8      32.9 #>  Column_Total 100.0 100.0 100.0     100.0 #>  N            241.6 294.4 106.9     642.9 #> ───────────────────────────────────────── #> Chi-2 = 355.1 (df = 4), p < 0.001, Cramer's V = 0.53  # With rescaled weights cross_tab(mtcars, cyl, gear, weights = mpg, rescale_weights = TRUE) #> Crosstable: cyl x gear (%) #> ───────────────────────────────────────── #>  Values           3     4     5 Row_Total #> ───────────────────────────────────────── #>  4              8.9  73.2  52.8      45.6 #>  6             16.3  26.8  18.4      21.5 #>  8             74.8   0.0  28.8      32.9 #>  Column_Total 100.0 100.0 100.0     100.0 #>  N             12.0  14.7   5.3      32.0 #> ───────────────────────────────────────── #> Chi-2 = 17.7 (df = 4), p = 0.00143, Cramer's V = 0.53  # Grouped by a single variable cross_tab(mtcars, cyl, gear, by = am) #> $auto #> Crosstable: cyl x gear | am = auto (%) #> ─────────────────────────────────── #>  Values           3     4 Row_Total #> ─────────────────────────────────── #>  4              6.7  50.0      15.8 #>  6             13.3  50.0      21.1 #>  8             80.0   0.0      63.2 #>  Column_Total 100.0 100.0     100.0 #>  N             15.0   4.0      19.0 #> ─────────────────────────────────── #> Chi-2 = 9 (df = 2), p = 0.0113, Cramer's V = 0.69 #>  #> $manual #> Crosstable: cyl x gear | am = manual (%) #> ─────────────────────────────────── #>  Values           4     5 Row_Total #> ─────────────────────────────────── #>  4             75.0  40.0      61.5 #>  6             25.0  20.0      23.1 #>  8              0.0  40.0      15.4 #>  Column_Total 100.0 100.0     100.0 #>  N              8.0   5.0      13.0 #> ─────────────────────────────────── #> Chi-2 = 3.8 (df = 2), p = 0.146, Cramer's V = 0.54 #>   # Grouped by interaction of two variables cross_tab(mtcars, cyl, gear, by = interaction(am, vs), combine = TRUE) #> Crosstable: cyl x gear by interaction(am, vs) #> ───────────────────────────────────────────────────────────── #>  Values           3     4     5 Row_Total interaction(am, vs) #> ───────────────────────────────────────────────────────────── #>  8            100.0  <NA>  <NA>     100.0              auto.V #>  Column_Total 100.0  <NA>  <NA>     100.0              auto.V #>  N             12.0  <NA>  <NA>      12.0              auto.V #>  4             <NA>   0.0  25.0      16.7            manual.V #>  6             <NA> 100.0  25.0      50.0            manual.V #>  8             <NA>   0.0  50.0      33.3            manual.V #>  Column_Total  <NA> 100.0 100.0     100.0            manual.V #>  N             <NA>   2.0   4.0       6.0            manual.V #>  4             33.3  50.0  <NA>      42.9              auto.S #>  6             66.7  50.0  <NA>      57.1              auto.S #>  Column_Total 100.0 100.0  <NA>     100.0              auto.S #>  N              3.0   4.0  <NA>       7.0              auto.S #>  4             <NA> 100.0 100.0     100.0            manual.S #>  Column_Total  <NA> 100.0 100.0     100.0            manual.S #>  N             <NA>   6.0   1.0       7.0            manual.S #> ───────────────────────────────────────────────────────────── #> [interaction(am, vs) = auto.V] Chi-squared test not applicable (table too small). #> [interaction(am, vs) = manual.V] Chi-2 = 3 (df = 2), p = 0.223, Cramer's V = 0.71 #> [interaction(am, vs) = auto.S] Chi-2 = 0.2 (df = 1), p = 0.659, Cramer's V = 0.17 #> [interaction(am, vs) = manual.S] Chi-squared test not applicable (table too small).  # Combined output for grouped data cross_tab(mtcars, cyl, gear, by = am, combine = TRUE) #> Crosstable: cyl x gear by am #> ──────────────────────────────────────────────── #>  Values           3     4     5 Row_Total     am #> ──────────────────────────────────────────────── #>  4              6.7  50.0  <NA>      15.8   auto #>  6             13.3  50.0  <NA>      21.1   auto #>  8             80.0   0.0  <NA>      63.2   auto #>  Column_Total 100.0 100.0  <NA>     100.0   auto #>  N             15.0   4.0  <NA>      19.0   auto #>  4             <NA>  75.0  40.0      61.5 manual #>  6             <NA>  25.0  20.0      23.1 manual #>  8             <NA>   0.0  40.0      15.4 manual #>  Column_Total  <NA> 100.0 100.0     100.0 manual #>  N             <NA>   8.0   5.0      13.0 manual #> ──────────────────────────────────────────────── #> [am = auto] Chi-2 = 9 (df = 2), p = 0.0113, Cramer's V = 0.69 #> [am = manual] Chi-2 = 3.8 (df = 2), p = 0.146, Cramer's V = 0.54  # Without totals or sample size cross_tab(mtcars, cyl, gear, row_total = FALSE, column_total = FALSE, n = FALSE) #> Crosstable: cyl x gear (%) #> ────────────────────── #>  Values    3    4    5 #> ────────────────────── #>  4       6.7 66.7 40.0 #>  6      13.3 33.3 20.0 #>  8      80.0  0.0 40.0 #> ────────────────────── #> Chi-2 = 18 (df = 4), p = 0.00121, Cramer's V = 0.53"},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency Table — freq","title":"Frequency Table — freq","text":"freq() creates frequency table variable vector, options weighting, sorting, handling missing values, calculating percentages.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency Table — freq","text":"","code":"freq(   data,   x = NULL,   weights = NULL,   digits = 1,   cum = FALSE,   total = TRUE,   exclude = NULL,   sort = \"\",   valid = TRUE,   na_val = NULL,   rescale_weights = FALSE,   info = TRUE,   labelled_levels = c(\"prefixed\", \"labels\", \"values\"),   styled = TRUE,   show_empty_levels = FALSE,   ... )"},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency Table — freq","text":"data data.frame, vector factor. data.frame provided, target variable x must specified. Matrices supported; please extract column convert vector tibble use. x dataframe variable. weights numeric vector weights. Must length x. digits Numeric. Number digits displayed percentages. Default 1. N, 2 digits displayed weight variable non-integer weights rescale_weight = T, otherwise 0. cum Logical. FALSE (default), display cumulative percentages. TRUE, display cumulative percentages. total Logical. TRUE (default), add final row totals. FALSE, remove final row totals. exclude Values exclude (e.g., NA, \"\"). Default NULL. sort Sorting method values: \"\" (default): specific sorting. \"+\": Sort increasing frequency. \"-\": Sort decreasing frequency. \"name+\": Sort alphabetically (-Z). \"name-\": Sort alphabetically (Z-). valid Logical. TRUE (default), display valid percentages (excluding missing values). FALSE, display valid percentages. na_val Character numeric. factors, character numeric vectors, values treated NA. rescale_weights Logical. FALSE (default), rescale weights. TRUE, total count unweighted x. info Logical. TRUE (default), print title note (label class x, variable weight, dataframe name) information model (model formula, number observations, residual standard deviation ). labelled_levels labelled variables, controls values displayed using labelled::to_factor(levels = \"prefixed\"): \"prefixed\" \"p\" (default): Show labels [value] label \"labels\" \"l\": Show label \"values\" \"v\": Show underlying value styled Logical. TRUE (default), formats output using print.spicy(), aligns columns dynamically structured three-line table. FALSE, returns standard data.frame without formatting. show_empty_levels Logical. FALSE (default), factor levels N = 0 removed output. Set TRUE retain levels, even observations. ... Additional arguments passed print.spicy(), show_all = TRUE","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency Table — freq","text":"formatted data.frame containing unique values x, frequencies (N), percentages (%), percentages valid values (Valid%), \"Total\" row. cum = TRUE, cumulative frequencies (%cum Valid%cum) included.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency Table — freq","text":"","code":"data(iris) data(mtcars) freq(iris, Species) #> Frequency table: Species #> ──────────────────────────── #>  Values       N     % Valid% #> ──────────────────────────── #>  setosa      50  33.3   33.3 #>  versicolor  50  33.3   33.3 #>  virginica   50  33.3   33.3 #>  Total      150 100.0  100.0 #> ──────────────────────────── #> Class: factor #> Data: iris #>  iris |> freq(Species, cum = TRUE) #> Frequency table: Species #> ──────────────────────────────────────────── #>  Values       N     % Valid%  %cum Valid%cum #> ──────────────────────────────────────────── #>  setosa      50  33.3   33.3  33.3      33.3 #>  versicolor  50  33.3   33.3  66.7      66.7 #>  virginica   50  33.3   33.3 100.0     100.0 #>  Total      150 100.0  100.0 100.0     100.0 #> ──────────────────────────────────────────── #> Class: factor #> Data: iris #>  freq(mtcars, cyl, sort = \"-\", cum = TRUE) #> Frequency table: cyl #> ─────────────────────────────────────── #>  Values  N     % Valid%  %cum Valid%cum #> ─────────────────────────────────────── #>  8      14  43.8   43.8  43.8      43.8 #>  4      11  34.4   34.4  78.1      78.1 #>  6       7  21.9   21.9 100.0     100.0 #>  Total  32 100.0  100.0 100.0     100.0 #> ─────────────────────────────────────── #> Class: numeric #> Data: mtcars #>  freq(mtcars, gear, weights = mpg, rescale_weights = TRUE) #> Frequency table: gear #> ────────────────────────── #>  Values     N     % Valid% #> ────────────────────────── #>  3      12.03  37.6   37.6 #>  4      14.65  45.8   45.8 #>  5       5.32  16.6   16.6 #>  Total  32.00 100.0  100.0 #> ────────────────────────── #> Class: numeric #> Data: mtcars #> Weight: mpg #>   # With labelled variable library(labelled) df <- data.frame( var1 = set_variable_labels(1:5, label = \"Numeric Variable with Label\"), var2 = labelled(1:5, c(\"Low\" = 1, \"Medium\" = 2, \"High\" = 3)), var3 = set_variable_labels( labelled(1:5, c(\"Bad\" = 1, \"Average\" = 2, \"Good\" = 3)), label = \"Labelled Variable with Label\")) df |> freq(var2) #> Frequency table: var2 #> ────────────────────────── #>  Values     N     % Valid% #> ────────────────────────── #>  [1] Low    1  20.0   20.0 #>  [2] Medium 1  20.0   20.0 #>  [3] High   1  20.0   20.0 #>  [4] 4      1  20.0   20.0 #>  [5] 5      1  20.0   20.0 #>  Total      5 100.0  100.0 #> ────────────────────────── #> Class: haven_labelled, vctrs_vctr, integer #> Data: df #>  df |> freq(var2,labelled_levels = \"l\") #> Frequency table: var2 #> ────────────────────── #>  Values N     % Valid% #> ────────────────────── #>  Low    1  20.0   20.0 #>  Medium 1  20.0   20.0 #>  High   1  20.0   20.0 #>  4      1  20.0   20.0 #>  5      1  20.0   20.0 #>  Total  5 100.0  100.0 #> ────────────────────── #> Class: haven_labelled, vctrs_vctr, integer #> Data: df #>  df |> freq(var2,labelled_levels = \"v\") #> Frequency table: var2 #> ────────────────────── #>  Values N     % Valid% #> ────────────────────── #>  1      1  20.0   20.0 #>  2      1  20.0   20.0 #>  3      1  20.0   20.0 #>  4      1  20.0   20.0 #>  5      1  20.0   20.0 #>  Total  5 100.0  100.0 #> ────────────────────── #> Class: haven_labelled, vctrs_vctr, integer #> Data: df #>  df |> freq(var3) #> Frequency table: var3 #> ─────────────────────────── #>  Values      N     % Valid% #> ─────────────────────────── #>  [1] Bad     1  20.0   20.0 #>  [2] Average 1  20.0   20.0 #>  [3] Good    1  20.0   20.0 #>  [4] 4       1  20.0   20.0 #>  [5] 5       1  20.0   20.0 #>  Total       5 100.0  100.0 #> ─────────────────────────── #> Label: Labelled Variable with Label #> Class: haven_labelled, vctrs_vctr, integer #> Data: df #>  df |> freq(var3,labelled_levels = \"v\") #> Frequency table: var3 #> ────────────────────── #>  Values N     % Valid% #> ────────────────────── #>  1      1  20.0   20.0 #>  2      1  20.0   20.0 #>  3      1  20.0   20.0 #>  4      1  20.0   20.0 #>  5      1  20.0   20.0 #>  Total  5 100.0  100.0 #> ────────────────────── #> Label: Labelled Variable with Label #> Class: haven_labelled, vctrs_vctr, integer #> Data: df #>  df |> freq(var3,labelled_levels = \"l\") #> Frequency table: var3 #> ─────────────────────── #>  Values  N     % Valid% #> ─────────────────────── #>  Bad     1  20.0   20.0 #>  Average 1  20.0   20.0 #>  Good    1  20.0   20.0 #>  4       1  20.0   20.0 #>  5       1  20.0   20.0 #>  Total   5 100.0  100.0 #> ─────────────────────── #> Label: Labelled Variable with Label #> Class: haven_labelled, vctrs_vctr, integer #> Data: df #>"},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Means with Optional Minimum Valid Values — mean_n","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"mean_n() computes row means data.frame matrix, handling missing values (NAs) automatically. Row-wise means calculated across selected numeric columns, optional condition minimum number (proportion) valid (non-missing) values required row included. Non-numeric columns excluded automatically reported.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"","code":"mean_n(   data = NULL,   select = dplyr::everything(),   exclude = NULL,   min_valid = NULL,   digits = NULL,   regex = FALSE,   verbose = FALSE )"},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"data data.frame matrix. select Columns include. regex = FALSE, use tidyselect syntax (default: dplyr::everything()). regex = TRUE, provide regular expression pattern (character string). exclude Columns exclude (default: NULL). min_valid Minimum number valid (non-NA) values required per row. proportion, applied number selected columns. digits Optional number decimal places round result. regex TRUE, select argument treated regular expression. FALSE, uses tidyselect helpers. verbose TRUE, prints message processing.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"numeric vector row-wise means.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/mean_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Means with Optional Minimum Valid Values — mean_n","text":"","code":"library(dplyr)  # Create a simple numeric data frame df <- tibble(   var1 = c(10, NA, 30, 40, 50),   var2 = c(5, NA, 15, NA, 25),   var3 = c(NA, 30, 20, 50, 10) )  # Compute row-wise mean (all values must be valid by default) mean_n(df) #> [1]       NA       NA 21.66667       NA 28.33333  # Require at least 2 valid (non-NA) values per row mean_n(df, min_valid = 2) #> [1]  7.50000       NA 21.66667 45.00000 28.33333  # Require at least 50% valid (non-NA) values per row mean_n(df, min_valid = 0.5) #> [1]  7.50000       NA 21.66667 45.00000 28.33333  # Round the result to 1 decimal mean_n(df, digits = 1) #> [1]   NA   NA 21.7   NA 28.3  # Select specific columns mean_n(df, select = c(var1, var2)) #> [1]  7.5   NA 22.5   NA 37.5  # Select specific columns using a pipe df |> select(var1, var2) |> mean_n() #> [1]  7.5   NA 22.5   NA 37.5  # Exclude a column mean_n(df, exclude = \"var3\") #> [1]  7.5   NA 22.5   NA 37.5  # Select columns ending with \"1\" mean_n(df, select = ends_with(\"1\")) #> [1] 10 NA 30 40 50  # Use with native pipe df |> mean_n(select = starts_with(\"var\")) #> [1]       NA       NA 21.66667       NA 28.33333  # Use inside dplyr::mutate() df |> mutate(mean_score = mean_n(min_valid = 2)) #> # A tibble: 5 × 4 #>    var1  var2  var3 mean_score #>   <dbl> <dbl> <dbl>      <dbl> #> 1    10     5    NA        7.5 #> 2    NA    NA    30       NA   #> 3    30    15    20       21.7 #> 4    40    NA    50       45   #> 5    50    25    10       28.3  # Select columns directly inside mutate() df |> mutate(mean_score = mean_n(select = c(var1, var2), min_valid = 1)) #> # A tibble: 5 × 4 #>    var1  var2  var3 mean_score #>   <dbl> <dbl> <dbl>      <dbl> #> 1    10     5    NA        7.5 #> 2    NA    NA    30       NA   #> 3    30    15    20       22.5 #> 4    40    NA    50       40   #> 5    50    25    10       37.5  # Select columns before mutate df |> select(var1, var2) |> mutate(mean_score = mean_n(min_valid = 1)) #> # A tibble: 5 × 3 #>    var1  var2 mean_score #>   <dbl> <dbl>      <dbl> #> 1    10     5        7.5 #> 2    NA    NA       NA   #> 3    30    15       22.5 #> 4    40    NA       40   #> 5    50    25       37.5  # Show verbose processing info df |> mutate(mean_score = mean_n(min_valid = 2, digits = 1, verbose = TRUE)) #> mean_n(): Row means computed with min_valid = 2, regex = FALSE #> # A tibble: 5 × 4 #>    var1  var2  var3 mean_score #>   <dbl> <dbl> <dbl>      <dbl> #> 1    10     5    NA        7.5 #> 2    NA    NA    30       NA   #> 3    30    15    20       21.7 #> 4    40    NA    50       45   #> 5    50    25    10       28.3  # Add character and grouping columns df_mixed <- mutate(df,   name = letters[1:5],   group = c(\"A\", \"A\", \"B\", \"B\", \"A\") ) df_mixed #> # A tibble: 5 × 5 #>    var1  var2  var3 name  group #>   <dbl> <dbl> <dbl> <chr> <chr> #> 1    10     5    NA a     A     #> 2    NA    NA    30 b     A     #> 3    30    15    20 c     B     #> 4    40    NA    50 d     B     #> 5    50    25    10 e     A      # Non-numeric columns are ignored mean_n(df_mixed) #> mean_n(): Ignored non-numeric columns: name, group #> [1]       NA       NA 21.66667       NA 28.33333  # Use within mutate() on mixed data df_mixed |> mutate(mean_score = mean_n(select = starts_with(\"var\"))) #> # A tibble: 5 × 6 #>    var1  var2  var3 name  group mean_score #>   <dbl> <dbl> <dbl> <chr> <chr>      <dbl> #> 1    10     5    NA a     A           NA   #> 2    NA    NA    30 b     A           NA   #> 3    30    15    20 c     B           21.7 #> 4    40    NA    50 d     B           NA   #> 5    50    25    10 e     A           28.3  # Use everything() but exclude non-numeric columns manually mean_n(df_mixed, select = everything(), exclude = \"group\") #> mean_n(): Ignored non-numeric columns: name #> [1]       NA       NA 21.66667       NA 28.33333  # Select columns using regex mean_n(df_mixed, select = \"^var\", regex = TRUE) #> [1]       NA       NA 21.66667       NA 28.33333 mean_n(df_mixed, select = \"ar\", regex = TRUE) #> [1]       NA       NA 21.66667       NA 28.33333  # Apply to a subset of rows (first 3) df_mixed[1:3, ] |> mean_n(select = starts_with(\"var\")) #> [1]       NA       NA 21.66667  # Store the result in a new column df_mixed$mean_score <- mean_n(df_mixed, select = starts_with(\"var\")) df_mixed #> # A tibble: 5 × 6 #>    var1  var2  var3 name  group mean_score #>   <dbl> <dbl> <dbl> <chr> <chr>      <dbl> #> 1    10     5    NA a     A           NA   #> 2    NA    NA    30 b     A           NA   #> 3    30    15    20 c     B           21.7 #> 4    40    NA    50 d     B           NA   #> 5    50    25    10 e     A           28.3  # With a numeric matrix mat <- matrix(c(1, 2, NA, 4, 5, NA, 7, 8, 9), nrow = 3, byrow = TRUE) mat #>      [,1] [,2] [,3] #> [1,]    1    2   NA #> [2,]    4    5   NA #> [3,]    7    8    9 mat |> mean_n(min_valid = 2) #> [1] 1.5 4.5 8.0"},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Formatted Data Frame with Aligned Columns — print.spicy","title":"Print a Formatted Data Frame with Aligned Columns — print.spicy","text":"print.spicy() prints data frame properly aligned columns, following structured three-line table format. first column left-aligned, columns right-aligned. Column widths dynamically adjusted based longest value column, including column names.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Formatted Data Frame with Aligned Columns — print.spicy","text":"","code":"# S3 method for class 'spicy' print(x, ...)"},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Formatted Data Frame with Aligned Columns — print.spicy","text":"x data frame, matrix, array (2D), table. ... Additional arguments (used).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Formatted Data Frame with Aligned Columns — print.spicy","text":"Invisibly returns x displaying formatted content.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/print.spicy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Formatted Data Frame with Aligned Columns — print.spicy","text":"","code":"if (FALSE) { # \\dontrun{ print.spicy(mtcars) } # }"},{"path":"https://amaltawfik.github.io/spicy/reference/spicy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"spicy: Descriptive Statistics and Data Management Tools — spicy-package","title":"spicy: Descriptive Statistics and Data Management Tools — spicy-package","text":"Extracts summarizes metadata data frames, including variable names, labels, types, missing values. Computes compact descriptive statistics, frequency tables, cross-tabulations assist efficient data exploration. Facilitates identification missing data patterns structural issues datasets. Designed streamline initial data management exploratory analysis workflows within 'R'.","code":""},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/reference/spicy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"spicy: Descriptive Statistics and Data Management Tools — spicy-package","text":"Maintainer: Amal Tawfik amal.tawfik@hesav.ch (ORCID) [copyright holder]","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Sums with Optional Minimum Valid Values — sum_n","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"sum_n() computes row sums data.frame matrix, handling missing values (NAs) automatically. Row-wise sums calculated across selected numeric columns, optional condition minimum number (proportion) valid (non-missing) values required row included. Non-numeric columns excluded automatically reported.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"","code":"sum_n(   data = NULL,   select = dplyr::everything(),   exclude = NULL,   min_valid = NULL,   digits = NULL,   regex = FALSE,   verbose = FALSE )"},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"data data.frame matrix. select Columns include. regex = FALSE, use tidyselect syntax (default: dplyr::everything()). regex = TRUE, provide regular expression pattern (character string). exclude Columns exclude (default: NULL). min_valid Minimum number valid (non-NA) values required per row. proportion, applied number selected columns. digits Optional number decimal places round result. regex TRUE, select argument treated regular expression. FALSE, uses tidyselect helpers. verbose TRUE, prints message processing.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"numeric vector row-wise sums","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/sum_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Sums with Optional Minimum Valid Values — sum_n","text":"","code":"library(dplyr)  # Create a simple numeric data frame df <- tibble(   var1 = c(10, NA, 30, 40, 50),   var2 = c(5, NA, 15, NA, 25),   var3 = c(NA, 30, 20, 50, 10) )  # Compute row-wise sums (all values must be valid by default) sum_n(df) #> [1] NA NA 65 NA 85  # Require at least 2 valid (non-NA) values per row sum_n(df, min_valid = 2) #> [1] 15 NA 65 90 85  # Require at least 50% valid (non-NA) values per row sum_n(df, min_valid = 0.5) #> [1] 15 NA 65 90 85  # Round the results to 1 decimal sum_n(df, digits = 1) #> [1] NA NA 65 NA 85  # Select specific columns sum_n(df, select = c(var1, var2)) #> [1] 15 NA 45 NA 75  # Select specific columns using a pipe df |> select(var1, var2) |> sum_n() #> [1] 15 NA 45 NA 75  # Exclude a column sum_n(df, exclude = \"var3\") #> [1] 15 NA 45 NA 75  # Select columns ending with \"1\" sum_n(df, select = ends_with(\"1\")) #> [1] 10 NA 30 40 50  # Use with native pipe df |> sum_n(select = starts_with(\"var\")) #> [1] NA NA 65 NA 85  # Use inside dplyr::mutate() df |> mutate(sum_score = sum_n(min_valid = 2)) #> # A tibble: 5 × 4 #>    var1  var2  var3 sum_score #>   <dbl> <dbl> <dbl>     <dbl> #> 1    10     5    NA        15 #> 2    NA    NA    30        NA #> 3    30    15    20        65 #> 4    40    NA    50        90 #> 5    50    25    10        85  # Select columns directly inside mutate() df |> mutate(sum_score = sum_n(select = c(var1, var2), min_valid = 1)) #> # A tibble: 5 × 4 #>    var1  var2  var3 sum_score #>   <dbl> <dbl> <dbl>     <dbl> #> 1    10     5    NA        15 #> 2    NA    NA    30        NA #> 3    30    15    20        45 #> 4    40    NA    50        40 #> 5    50    25    10        75  # Select columns before mutate df |> select(var1, var2) |> mutate(sum_score = sum_n(min_valid = 1)) #> # A tibble: 5 × 3 #>    var1  var2 sum_score #>   <dbl> <dbl>     <dbl> #> 1    10     5        15 #> 2    NA    NA        NA #> 3    30    15        45 #> 4    40    NA        40 #> 5    50    25        75  # Show verbose message df |> mutate(sum_score = sum_n(min_valid = 2, digits = 1, verbose = TRUE)) #> sum_n(): Row sums computed with min_valid = 2, regex = FALSE #> # A tibble: 5 × 4 #>    var1  var2  var3 sum_score #>   <dbl> <dbl> <dbl>     <dbl> #> 1    10     5    NA        15 #> 2    NA    NA    30        NA #> 3    30    15    20        65 #> 4    40    NA    50        90 #> 5    50    25    10        85  # Add character and grouping columns df_mixed <- mutate(df,   name = letters[1:5],   group = c(\"A\", \"A\", \"B\", \"B\", \"A\") ) df_mixed #> # A tibble: 5 × 5 #>    var1  var2  var3 name  group #>   <dbl> <dbl> <dbl> <chr> <chr> #> 1    10     5    NA a     A     #> 2    NA    NA    30 b     A     #> 3    30    15    20 c     B     #> 4    40    NA    50 d     B     #> 5    50    25    10 e     A      # Non-numeric columns are ignored sum_n(df_mixed) #> sum_n(): Ignored non-numeric columns: name, group #> [1] NA NA 65 NA 85  # Use inside mutate with mixed data df_mixed |> mutate(sum_score = sum_n(select = starts_with(\"var\"))) #> # A tibble: 5 × 6 #>    var1  var2  var3 name  group sum_score #>   <dbl> <dbl> <dbl> <chr> <chr>     <dbl> #> 1    10     5    NA a     A            NA #> 2    NA    NA    30 b     A            NA #> 3    30    15    20 c     B            65 #> 4    40    NA    50 d     B            NA #> 5    50    25    10 e     A            85  # Use everything(), but exclude known non-numeric sum_n(df_mixed, select = everything(), exclude = \"group\") #> sum_n(): Ignored non-numeric columns: name #> [1] NA NA 65 NA 85  # Select columns using regex sum_n(df_mixed, select = \"^var\", regex = TRUE) #> [1] NA NA 65 NA 85 sum_n(df_mixed, select = \"ar\", regex = TRUE) #> [1] NA NA 65 NA 85  # Apply to a subset of rows df_mixed[1:3, ] |> sum_n(select = starts_with(\"var\")) #> [1] NA NA 65  # Store the result in a new column df_mixed$sum_score <- sum_n(df_mixed, select = starts_with(\"var\")) df_mixed #> # A tibble: 5 × 6 #>    var1  var2  var3 name  group sum_score #>   <dbl> <dbl> <dbl> <chr> <chr>     <dbl> #> 1    10     5    NA a     A            NA #> 2    NA    NA    30 b     A            NA #> 3    30    15    20 c     B            65 #> 4    40    NA    50 d     B            NA #> 5    50    25    10 e     A            85  # With a numeric matrix mat <- matrix(c(1, 2, NA, 4, 5, NA, 7, 8, 9), nrow = 3, byrow = TRUE) mat #>      [,1] [,2] [,3] #> [1,]    1    2   NA #> [2,]    4    5   NA #> [3,]    7    8    9 mat |> sum_n(min_valid = 2) #> [1]  3  9 24"},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a comprehensive summary of the variables — varlist","title":"Generate a comprehensive summary of the variables — varlist","text":"varlist() lists variables data frame extracts essential metadata, including variable names, labels, summary values, classes, number distinct values, number valid (non-missing) observations, number missing values. vl() convenient shorthand varlist() offers identical functionality shorter name.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a comprehensive summary of the variables — varlist","text":"","code":"varlist(   x,   ...,   values = FALSE,   tbl = FALSE,   include_na = FALSE,   .raw_expr = substitute(x) )  vl(x, ..., values = FALSE, tbl = FALSE, include_na = FALSE)"},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a comprehensive summary of the variables — varlist","text":"x data frame transformation one. Must named identifiable. ... Optional tidyselect-style column selectors (e.g. starts_with(\"var\"), (.numeric), etc.). values Logical. FALSE (default), min/max representative values displayed. TRUE, unique values listed. tbl Logical. FALSE (default), summary opened Viewer (interactive). TRUE, tibble returned instead. include_na Logical. TRUE, missing values (NA) included Values column. Default FALSE. .raw_expr Internal. use. Captures original expression vl() generate informative title. Used internal purposes.","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a comprehensive summary of the variables — varlist","text":"tibble one row per (selected) variable, containing following columns: Variable: variable names Label: variable labels (available via label attribute) Values: summary variable's values, depending values include_na arguments. values = FALSE, compact summary (max 4 values: 3 + ... + last) shown. values = TRUE, unique non-missing values displayed. labelled variables, prefixed labels displayed using labelled::to_factor(levels = \"prefixed\"). factors, levels used -. Missing values (NA, NaN) optionally appended end (controlled via include_na). Class: class variable (possibly multiple, e.g. \"labelled\", \"numeric\") Ndist_val: number distinct non-missing values N_valid: number non-missing observations NAs: number missing observations tbl = FALSE used interactively, summary displayed Viewer pane. data frame transformation (e.g. head(df) df[ , 1:3]), asterisk (*) appended name title (e.g. VARLIST df*).","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a comprehensive summary of the variables — varlist","text":"function can also apply tidyselect-style variable selectors filter columns dynamically. used interactively (e.g. RStudio), summary displayed Viewer pane contextual title like VARLIST iris. data frame transformed subsetted, title display asterisk (*), e.g. VARLIST iris*. full documentation, see varlist().","code":""},{"path":"https://amaltawfik.github.io/spicy/reference/varlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a comprehensive summary of the variables — varlist","text":"","code":"varlist(iris) #> Non-interactive session: use `tbl = TRUE` to return the table. iris |> varlist() #> Non-interactive session: use `tbl = TRUE` to return the table. iris |> varlist(starts_with(\"Sepal\"), tbl = TRUE) #> # A tibble: 2 × 7 #>   Variable     Label Values                  Class   Ndist_val N_valid   NAs #>   <chr>        <chr> <chr>                   <chr>       <int>   <int> <int> #> 1 Sepal.Length NA    4.3, 4.4, 4.5, ..., 7.9 numeric        35     150     0 #> 2 Sepal.Width  NA    2, 2.2, 2.3, ..., 4.4   numeric        23     150     0 varlist(mtcars, where(is.numeric), values = TRUE, tbl = TRUE) #> # A tibble: 11 × 7 #>    Variable Label Values                           Class Ndist_val N_valid   NAs #>    <chr>    <chr> <chr>                            <chr>     <int>   <int> <int> #>  1 mpg      NA    10.4, 13.3, 14.3, 14.7, 15, 15.… nume…        25      32     0 #>  2 cyl      NA    4, 6, 8                          nume…         3      32     0 #>  3 disp     NA    71.1, 75.7, 78.7, 79, 95.1, 108… nume…        27      32     0 #>  4 hp       NA    52, 62, 65, 66, 91, 93, 95, 97,… nume…        22      32     0 #>  5 drat     NA    2.76, 2.93, 3, 3.07, 3.08, 3.15… nume…        22      32     0 #>  6 wt       NA    1.513, 1.615, 1.835, 1.935, 2.1… nume…        29      32     0 #>  7 qsec     NA    14.5, 14.6, 15.41, 15.5, 15.84,… nume…        30      32     0 #>  8 vs       NA    0, 1                             nume…         2      32     0 #>  9 am       NA    0, 1                             nume…         2      32     0 #> 10 gear     NA    3, 4, 5                          nume…         3      32     0 #> 11 carb     NA    1, 2, 3, 4, 6, 8                 nume…         6      32     0 varlist(head(mtcars), tbl = TRUE) #> # A tibble: 11 × 7 #>    Variable Label Values                          Class  Ndist_val N_valid   NAs #>    <chr>    <chr> <chr>                           <chr>      <int>   <int> <int> #>  1 mpg      NA    18.1, 18.7, 21, ..., 22.8       numer…         5       6     0 #>  2 cyl      NA    4, 6, 8                         numer…         3       6     0 #>  3 disp     NA    108, 160, 225, ..., 360         numer…         5       6     0 #>  4 hp       NA    93, 105, 110, 175               numer…         4       6     0 #>  5 drat     NA    2.76, 3.08, 3.15, ..., 3.9      numer…         5       6     0 #>  6 wt       NA    2.32, 2.62, 2.875, ..., 3.46    numer…         6       6     0 #>  7 qsec     NA    16.46, 17.02, 18.61, ..., 20.22 numer…         5       6     0 #>  8 vs       NA    0, 1                            numer…         2       6     0 #>  9 am       NA    0, 1                            numer…         2       6     0 #> 10 gear     NA    3, 4                            numer…         2       6     0 #> 11 carb     NA    1, 2, 4                         numer…         3       6     0 varlist(mtcars, tbl = TRUE) #> # A tibble: 11 × 7 #>    Variable Label Values                          Class  Ndist_val N_valid   NAs #>    <chr>    <chr> <chr>                           <chr>      <int>   <int> <int> #>  1 mpg      NA    10.4, 13.3, 14.3, ..., 33.9     numer…        25      32     0 #>  2 cyl      NA    4, 6, 8                         numer…         3      32     0 #>  3 disp     NA    71.1, 75.7, 78.7, ..., 472      numer…        27      32     0 #>  4 hp       NA    52, 62, 65, ..., 335            numer…        22      32     0 #>  5 drat     NA    2.76, 2.93, 3, ..., 4.93        numer…        22      32     0 #>  6 wt       NA    1.513, 1.615, 1.835, ..., 5.424 numer…        29      32     0 #>  7 qsec     NA    14.5, 14.6, 15.41, ..., 22.9    numer…        30      32     0 #>  8 vs       NA    0, 1                            numer…         2      32     0 #>  9 am       NA    0, 1                            numer…         2      32     0 #> 10 gear     NA    3, 4, 5                         numer…         3      32     0 #> 11 carb     NA    1, 2, 3, ..., 8                 numer…         6      32     0 varlist(iris[, 1:3], tbl = TRUE) #> # A tibble: 3 × 7 #>   Variable     Label Values                  Class   Ndist_val N_valid   NAs #>   <chr>        <chr> <chr>                   <chr>       <int>   <int> <int> #> 1 Sepal.Length NA    4.3, 4.4, 4.5, ..., 7.9 numeric        35     150     0 #> 2 Sepal.Width  NA    2, 2.2, 2.3, ..., 4.4   numeric        23     150     0 #> 3 Petal.Length NA    1, 1.1, 1.2, ..., 6.9   numeric        43     150     0 varlist(mtcars[1:10, ], tbl = TRUE) #> # A tibble: 11 × 7 #>    Variable Label Values                         Class   Ndist_val N_valid   NAs #>    <chr>    <chr> <chr>                          <chr>       <int>   <int> <int> #>  1 mpg      NA    14.3, 18.1, 18.7, ..., 24.4    numeric         8      10     0 #>  2 cyl      NA    4, 6, 8                        numeric         3      10     0 #>  3 disp     NA    108, 140.8, 146.7, ..., 360    numeric         8      10     0 #>  4 hp       NA    62, 93, 95, ..., 245           numeric         8      10     0 #>  5 drat     NA    2.76, 3.08, 3.15, ..., 3.92    numeric         8      10     0 #>  6 wt       NA    2.32, 2.62, 2.875, ..., 3.57   numeric         9      10     0 #>  7 qsec     NA    15.84, 16.46, 17.02, ..., 22.9 numeric         9      10     0 #>  8 vs       NA    0, 1                           numeric         2      10     0 #>  9 am       NA    0, 1                           numeric         2      10     0 #> 10 gear     NA    3, 4                           numeric         2      10     0 #> 11 carb     NA    1, 2, 4                        numeric         3      10     0  vl(iris) #> Non-interactive session: use `tbl = TRUE` to return the table. iris |> vl() #> Non-interactive session: use `tbl = TRUE` to return the table. vl(mtcars, starts_with(\"d\")) #> Non-interactive session: use `tbl = TRUE` to return the table. vl(head(iris), include_na = TRUE) #> Non-interactive session: use `tbl = TRUE` to return the table. vl(iris[, 1:3], values = TRUE, tbl = TRUE) #> # A tibble: 3 × 7 #>   Variable     Label Values                        Class Ndist_val N_valid   NAs #>   <chr>        <chr> <chr>                         <chr>     <int>   <int> <int> #> 1 Sepal.Length NA    4.3, 4.4, 4.5, 4.6, 4.7, 4.8… nume…        35     150     0 #> 2 Sepal.Width  NA    2, 2.2, 2.3, 2.4, 2.5, 2.6, … nume…        23     150     0 #> 3 Petal.Length NA    1, 1.1, 1.2, 1.3, 1.4, 1.5, … nume…        43     150     0"},{"path":[]},{"path":"https://amaltawfik.github.io/spicy/news/index.html","id":"initial-release-0-1-0","dir":"Changelog","previous_headings":"","what":"Initial release","title":"spicy 0.1.0","text":"Introduces collection tools variable inspection, descriptive summaries, data exploration. Extract variable metadata display compact summaries (varlist()). Compute frequency tables (freq()), cross-tabulations (cross_tab()), Cramer’s V categorical associations (cramer_v()). Generate descriptive statistics means (mean_n()), sums (sum_n()), counts (count_n()) automatic handling missing data. Copy data (copy_clipboard()) directly clipboard quick export.","code":""}]
